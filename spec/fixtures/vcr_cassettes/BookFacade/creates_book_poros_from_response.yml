---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/books/v1/volumes?key=DONT_SHARE_MY_KEY&q=freedom%20writers
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.10.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Thu, 25 Jul 2024 18:59:03 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 25 Jul 2024 18:59:03 GMT
- request:
    method: get
    uri: https://www.googleapis.com/books/v1/volumes/AbyoDwAAQBAJ?key=DONT_SHARE_MY_KEY
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.10.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Thu, 25 Jul 2024 18:59:03 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogImJvb2tzI3ZvbHVtZSIsCiAgImlkIjogIkFieW9Ed0FBUUJBSiIsCiAgImV0YWciOiAiNTJCUGkwUk5jd1EiLAogICJzZWxmTGluayI6ICJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9ib29rcy92MS92b2x1bWVzL0FieW9Ed0FBUUJBSiIsCiAgInZvbHVtZUluZm8iOiB7CiAgICAidGl0bGUiOiAiV2VsY29tZSB0byB0aGUgUGFydHkiLAogICAgImF1dGhvcnMiOiBbCiAgICAgICJHYWJyaWVsbGUgVW5pb24iCiAgICBdLAogICAgInB1Ymxpc2hlciI6ICJIYXJwZXJDb2xsaW5zIiwKICAgICJwdWJsaXNoZWREYXRlIjogIjIwMjAtMDUtMDUiLAogICAgImRlc2NyaXB0aW9uIjogIlx1MDAzY3BcdTAwM2VcdTAwM2NiXHUwMDNlUHJhaXNlZCBieSBmYW4gZmF2b3JpdGVzIGluY2x1ZGluZyBIb2RhIEtvdGIsIEtpbSAmIEtobG9lIEthcmRhc2hpYW4sIGFuZCBKaW1teSBGYWxsb24hXHUwMDNjL2JcdTAwM2VcdTAwM2MvcFx1MDAzZVx1MDAzY3BcdTAwM2VcdTAwM2NiXHUwMDNlSW5zcGlyZWQgYnkgdGhlIGVhZ2VybHkgYXdhaXRlZCBiaXJ0aCBvZiBoZXIgZGF1Z2h0ZXIsIEthYXZpYSBKYW1lcyBVbmlvbiBXYWRlLCBcdTAwM2NpXHUwMDNlTmV3IFlvcmsgVGltZXNcdTAwM2MvaVx1MDAzZSBiZXN0c2VsbGluZyBhdXRob3IgYW5kIGF3YXJkLXdpbm5pbmcgYWN0cmVzcyBHYWJyaWVsbGUgVW5pb24gcGVucyBhIGZlc3RpdmUgYW5kIHVuaXZlcnNhbCBsb3ZlIGxldHRlciBmcm9tIHBhcmVudHMgdG8gbGl0dGxlIG9uZXMsIHBlcmZlY3QgZm9yIHdlbGNvbWluZyBhIGJhYnkgdG8gdGhlIHBhcnR5IG9mIGxpZmUhXHUwMDNjL2JcdTAwM2VcdTAwM2MvcFx1MDAzZVx1MDAzY3BcdTAwM2VSZW1pbmlzY2VudCBvZiBmYXZvcml0ZXMgc3VjaCBhcyBcdTAwM2NpXHUwMDNlVGhlIFdvbmRlcmZ1bCBUaGluZ3MgWW914oCZbGwgQmVcdTAwM2MvaVx1MDAzZSBieSBFbWlseSBXaW5maWVsZCBNYXJ0aW4sIFx1MDAzY2lcdTAwM2VJ4oCZdmUgTG92ZWQgWW91IFNpbmNlIEZvcmV2ZXJcdTAwM2MvaVx1MDAzZSBieSBIb2RhIEtvdGIsIGFuZCBcdTAwM2NpXHUwMDNlVGFrZSBIZWFydCwgTXkgQ2hpbGRcdTAwM2MvaVx1MDAzZSBieSBBaW5zbGV5IEVhcmhhcmR0LCBcdTAwM2NpXHUwMDNlV2VsY29tZSB0byB0aGUgUGFydHlcdTAwM2MvaVx1MDAzZSBpcyBhbiB1cGJlYXQgY2VsZWJyYXRpb24gb2YgbmV3IGxpZmUgdGhhdCB5b3XigJlsbCB3YW50IHRvIGVuam95IHdpdGggeW91ciB0aW55IGd1ZXN0IG9mIGhvbm9yIG92ZXIgYW5kIG92ZXIgYWdhaW4uXHUwMDNjL3BcdTAwM2VcdTAwM2NwXHUwMDNlwqBBIGdyZWF0IGdpZnQgZm9yIGFsbCBvY2Nhc2lvbnMsIGVzcGVjaWFsbHkgTW90aGVy4oCZcyBEYXksIEZhdGhlcuKAmXMgRGF5LCBiYWJ5IHNob3dlcnMsIGFuZCBiaXJ0aGRheXMuXHUwMDNjL3BcdTAwM2UiLAogICAgImluZHVzdHJ5SWRlbnRpZmllcnMiOiBbCiAgICAgIHsKICAgICAgICAidHlwZSI6ICJJU0JOXzEwIiwKICAgICAgICAiaWRlbnRpZmllciI6ICIwMDYyOTk5MTg0IgogICAgICB9LAogICAgICB7CiAgICAgICAgInR5cGUiOiAiSVNCTl8xMyIsCiAgICAgICAgImlkZW50aWZpZXIiOiAiOTc4MDA2Mjk5OTE4NCIKICAgICAgfQogICAgXSwKICAgICJyZWFkaW5nTW9kZXMiOiB7CiAgICAgICJ0ZXh0IjogdHJ1ZSwKICAgICAgImltYWdlIjogdHJ1ZQogICAgfSwKICAgICJwYWdlQ291bnQiOiAzMiwKICAgICJwcmludGVkUGFnZUNvdW50IjogMzcsCiAgICAicHJpbnRUeXBlIjogIkJPT0siLAogICAgImNhdGVnb3JpZXMiOiBbCiAgICAgICJKdXZlbmlsZSBGaWN0aW9uIC8gRmFtaWx5IC8gQmxlbmRlZCBGYW1pbGllcyIsCiAgICAgICJKdXZlbmlsZSBGaWN0aW9uIC8gRmFtaWx5IC8gTmV3IEJhYnkiLAogICAgICAiSnV2ZW5pbGUgRmljdGlvbiAvIEhvbGlkYXlzICYgQ2VsZWJyYXRpb25zIC8gTW90aGVyJ3MgRGF5IgogICAgXSwKICAgICJtYXR1cml0eVJhdGluZyI6ICJOT1RfTUFUVVJFIiwKICAgICJhbGxvd0Fub25Mb2dnaW5nIjogdHJ1ZSwKICAgICJjb250ZW50VmVyc2lvbiI6ICIxLjMuMi4wLnByZXZpZXcuMyIsCiAgICAicGFuZWxpemF0aW9uU3VtbWFyeSI6IHsKICAgICAgImNvbnRhaW5zRXB1YkJ1YmJsZXMiOiBmYWxzZSwKICAgICAgImNvbnRhaW5zSW1hZ2VCdWJibGVzIjogZmFsc2UKICAgIH0sCiAgICAiaW1hZ2VMaW5rcyI6IHsKICAgICAgInNtYWxsVGh1bWJuYWlsIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL3B1Ymxpc2hlci9jb250ZW50P2lkPUFieW9Ed0FBUUJBSiZwcmludHNlYz1mcm9udGNvdmVyJmltZz0xJnpvb209NSZlZGdlPWN1cmwmaW1ndGs9QUZMUkU3M2NDN2hJazJ2ZGgxbTRxZWxPNXNsaUFfbnNvRF80WG5XbHpudXExYUJCaklKOXg3X0NzRGVnb05Oa3hjVTBtQmhXZXRONzBsZXVtWDEtUFk0bVRwLWNERGpRUUpFRkNKSmtmN1g2TFJCU3k1UmV6enFpT1k5eE9vc1M0Q1U1clZzR095X2Qmc291cmNlPWdic19hcGkiLAogICAgICAidGh1bWJuYWlsIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL3B1Ymxpc2hlci9jb250ZW50P2lkPUFieW9Ed0FBUUJBSiZwcmludHNlYz1mcm9udGNvdmVyJmltZz0xJnpvb209MSZlZGdlPWN1cmwmaW1ndGs9QUZMUkU3MzJlQUQycGdaWThWRFd0eWVzOGhvTmYtbzNST2ZaRjZRMGY0S3p3RWM5U0dQMEh6R3NySTZiLU8yZjhLRm11RGdpcDl1bzNacHp5Z2RQbjJiSWJ5ejRZQlFKY191cXozYlFvWVd4Z2lfb2JzV1d3dGl3dGYyZEtHWFhSS0psMUFlVkdvQUMmc291cmNlPWdic19hcGkiLAogICAgICAic21hbGwiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvcHVibGlzaGVyL2NvbnRlbnQ/aWQ9QWJ5b0R3QUFRQkFKJnByaW50c2VjPWZyb250Y292ZXImaW1nPTEmem9vbT0yJmVkZ2U9Y3VybCZpbWd0az1BRkxSRTczUzZRVkZsQ0JkcjF3R2dPUlFMNXNCdmhESkVMUzBGYk5HUjc3X2tfeHNRU25fM1dOcUxRcmdkcmpPSU9PVHdrWDZaclZJdkcyLTVsdC1nMzVMMDY1Uy0zQ3RwejFzZEI4LTFTRDBPRXlNOEwzeXRSaHJIRlo1WGhmX0tyU3pHTXFTeDRnaSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICJtZWRpdW0iOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvcHVibGlzaGVyL2NvbnRlbnQ/aWQ9QWJ5b0R3QUFRQkFKJnByaW50c2VjPWZyb250Y292ZXImaW1nPTEmem9vbT0zJmVkZ2U9Y3VybCZpbWd0az1BRkxSRTczb0YxTC1yNDczRnZqeWxrb1M1cmhrYVBzbWRzNUNJcEtmOUVTb2RucUNyZ3RNNHJCVVR6RUp3clZmYmY2bHp5RzBjeUNFbThHOEVwMW0zS0FWYXF5cG9TMkdiaEd1XzVvaDlPTW5TSmlsNng0aC1DbnM3NlJIOEVoVmF4dTdIeFFnV0s5aCZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICJsYXJnZSI6ICJodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcy9wdWJsaXNoZXIvY29udGVudD9pZD1BYnlvRHdBQVFCQUomcHJpbnRzZWM9ZnJvbnRjb3ZlciZpbWc9MSZ6b29tPTQmZWRnZT1jdXJsJmltZ3RrPUFGTFJFNzNyRlhjVi1BamNILTJLdTJZd3NqeWkxdTdaYWg3dGpEamh2S1FMNnNsWE1icDlUa0VqWXhKNDRfUzFXR0N2Y0lvUWU3QWJqVHR3TUZIY3VObmRDMHlEYndEWlhtblhiSTlmYktkOE1nU3RKZl9UbUhoNUhjdDEwelpmbVZ6ZEpsQVZOLVJJJnNvdXJjZT1nYnNfYXBpIiwKICAgICAgImV4dHJhTGFyZ2UiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvcHVibGlzaGVyL2NvbnRlbnQ/aWQ9QWJ5b0R3QUFRQkFKJnByaW50c2VjPWZyb250Y292ZXImaW1nPTEmem9vbT02JmVkZ2U9Y3VybCZpbWd0az1BRkxSRTcwRVY2QngxYWRHbFUyQ2VKQVo4Vk85cXdNYkRpMG1WUUZJSmdOc1ZkOGJPNUhSVG1YOGNrbHduWkZjWHVNRUc0UEJwYU41bExGaW5jSUo3U1BRRkhBY2lzOHpENGNUNlh3ZUZPUmtGNlpLTUxQT3ZSWmYzLU9WNHlDN0ZpWTgwOEdwVXlGMCZzb3VyY2U9Z2JzX2FwaSIKICAgIH0sCiAgICAibGFuZ3VhZ2UiOiAiZW4iLAogICAgInByZXZpZXdMaW5rIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzP2lkPUFieW9Ed0FBUUJBSiZobD0mc291cmNlPWdic19hcGkiLAogICAgImluZm9MaW5rIjogImh0dHBzOi8vcGxheS5nb29nbGUuY29tL3N0b3JlL2Jvb2tzL2RldGFpbHM/aWQ9QWJ5b0R3QUFRQkFKJnNvdXJjZT1nYnNfYXBpIiwKICAgICJjYW5vbmljYWxWb2x1bWVMaW5rIjogImh0dHBzOi8vcGxheS5nb29nbGUuY29tL3N0b3JlL2Jvb2tzL2RldGFpbHM/aWQ9QWJ5b0R3QUFRQkFKIgogIH0sCiAgImxheWVySW5mbyI6IHsKICAgICJsYXllcnMiOiBbCiAgICAgIHsKICAgICAgICAibGF5ZXJJZCI6ICJnZW8iLAogICAgICAgICJ2b2x1bWVBbm5vdGF0aW9uc1ZlcnNpb24iOiAiNCIKICAgICAgfQogICAgXQogIH0sCiAgInNhbGVJbmZvIjogewogICAgImNvdW50cnkiOiAiVVMiLAogICAgInNhbGVhYmlsaXR5IjogIkZPUl9TQUxFIiwKICAgICJpc0Vib29rIjogdHJ1ZSwKICAgICJsaXN0UHJpY2UiOiB7CiAgICAgICJhbW91bnQiOiA5Ljk5LAogICAgICAiY3VycmVuY3lDb2RlIjogIlVTRCIKICAgIH0sCiAgICAicmV0YWlsUHJpY2UiOiB7CiAgICAgICJhbW91bnQiOiA5Ljk5LAogICAgICAiY3VycmVuY3lDb2RlIjogIlVTRCIKICAgIH0sCiAgICAiYnV5TGluayI6ICJodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9ib29rcy9kZXRhaWxzP2lkPUFieW9Ed0FBUUJBSiZyZGlkPWJvb2stQWJ5b0R3QUFRQkFKJnJkb3Q9MSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAib2ZmZXJzIjogWwogICAgICB7CiAgICAgICAgImZpbnNreU9mZmVyVHlwZSI6IDEsCiAgICAgICAgImxpc3RQcmljZSI6IHsKICAgICAgICAgICJhbW91bnRJbk1pY3JvcyI6IDk5OTAwMDAsCiAgICAgICAgICAiY3VycmVuY3lDb2RlIjogIlVTRCIKICAgICAgICB9LAogICAgICAgICJyZXRhaWxQcmljZSI6IHsKICAgICAgICAgICJhbW91bnRJbk1pY3JvcyI6IDk5OTAwMDAsCiAgICAgICAgICAiY3VycmVuY3lDb2RlIjogIlVTRCIKICAgICAgICB9LAogICAgICAgICJnaWZ0YWJsZSI6IHRydWUKICAgICAgfQogICAgXQogIH0sCiAgImFjY2Vzc0luZm8iOiB7CiAgICAiY291bnRyeSI6ICJVUyIsCiAgICAidmlld2FiaWxpdHkiOiAiUEFSVElBTCIsCiAgICAiZW1iZWRkYWJsZSI6IHRydWUsCiAgICAicHVibGljRG9tYWluIjogZmFsc2UsCiAgICAidGV4dFRvU3BlZWNoUGVybWlzc2lvbiI6ICJBTExPV0VEIiwKICAgICJlcHViIjogewogICAgICAiaXNBdmFpbGFibGUiOiB0cnVlLAogICAgICAiYWNzVG9rZW5MaW5rIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2Rvd25sb2FkL1dlbGNvbWVfdG9fdGhlX1BhcnR5LXNhbXBsZS1lcHViLmFjc20/aWQ9QWJ5b0R3QUFRQkFKJmZvcm1hdD1lcHViJm91dHB1dD1hY3M0X2Z1bGZpbGxtZW50X3Rva2VuJmRsX3R5cGU9c2FtcGxlJnNvdXJjZT1nYnNfYXBpIgogICAgfSwKICAgICJwZGYiOiB7CiAgICAgICJpc0F2YWlsYWJsZSI6IHRydWUsCiAgICAgICJhY3NUb2tlbkxpbmsiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvZG93bmxvYWQvV2VsY29tZV90b190aGVfUGFydHktc2FtcGxlLXBkZi5hY3NtP2lkPUFieW9Ed0FBUUJBSiZmb3JtYXQ9cGRmJm91dHB1dD1hY3M0X2Z1bGZpbGxtZW50X3Rva2VuJmRsX3R5cGU9c2FtcGxlJnNvdXJjZT1nYnNfYXBpIgogICAgfSwKICAgICJ3ZWJSZWFkZXJMaW5rIjogImh0dHA6Ly9wbGF5Lmdvb2dsZS5jb20vYm9va3MvcmVhZGVyP2lkPUFieW9Ed0FBUUJBSiZobD0mc291cmNlPWdic19hcGkiLAogICAgImFjY2Vzc1ZpZXdTdGF0dXMiOiAiU0FNUExFIiwKICAgICJxdW90ZVNoYXJpbmdBbGxvd2VkIjogZmFsc2UKICB9Cn0K
  recorded_at: Thu, 25 Jul 2024 18:59:03 GMT
recorded_with: VCR 6.2.0
