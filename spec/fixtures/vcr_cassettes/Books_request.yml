---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/books/v1/volumes?key=DONT_SHARE_MY_KEY&q=freedom%20writers
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.10.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Fri, 12 Jul 2024 06:55:38 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogImJvb2tzI3ZvbHVtZXMiLAogICJ0b3RhbEl0ZW1zIjogMTgwNCwKICAiaXRlbXMiOiBbCiAgICB7CiAgICAgICJraW5kIjogImJvb2tzI3ZvbHVtZSIsCiAgICAgICJpZCI6ICJTLUpBdHQ4YUhhVUMiLAogICAgICAiZXRhZyI6ICJmaFRhU3dXdTFpcyIsCiAgICAgICJzZWxmTGluayI6ICJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9ib29rcy92MS92b2x1bWVzL1MtSkF0dDhhSGFVQyIsCiAgICAgICJ2b2x1bWVJbmZvIjogewogICAgICAgICJ0aXRsZSI6ICJUaGUgRnJlZWRvbSBXcml0ZXJzIERpYXJ5ICgyMHRoIEFubml2ZXJzYXJ5IEVkaXRpb24pIiwKICAgICAgICAic3VidGl0bGUiOiAiSG93IGEgVGVhY2hlciBhbmQgMTUwIFRlZW5zIFVzZWQgV3JpdGluZyB0byBDaGFuZ2UgVGhlbXNlbHZlcyBhbmQgdGhlIFdvcmxkIEFyb3VuZCBUaGVtIiwKICAgICAgICAiYXV0aG9ycyI6IFsKICAgICAgICAgICJUaGUgRnJlZWRvbSBXcml0ZXJzIiwKICAgICAgICAgICJFcmluIEdydXdlbGwiCiAgICAgICAgXSwKICAgICAgICAicHVibGlzaGVyIjogIkNyb3duIiwKICAgICAgICAicHVibGlzaGVkRGF0ZSI6ICIyMDA3LTA0LTI0IiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiIzEgTkVXIFlPUksgVElNRVMgQkVTVFNFTExFUiDigKIgVGhlIHR3ZW50aWV0aCBhbm5pdmVyc2FyeSBlZGl0aW9uIG9mIHRoZSBjbGFzc2ljIHN0b3J5IG9mIGFuIGluY3JlZGlibGUgZ3JvdXAgb2Ygc3R1ZGVudHMgYW5kIHRoZSB0ZWFjaGVyIHdobyBpbnNwaXJlZCB0aGVtLCBmZWF0dXJpbmcgdXBkYXRlcyBvbiB0aGUgc3R1ZGVudHPigJkgbGl2ZXMsIG5ldyBqb3VybmFsIGVudHJpZXMsIGFuZCBhbiBpbnRyb2R1Y3Rpb24gYnkgRXJpbiBHcnV3ZWxsIE5vdyBhIHB1YmxpYyB0ZWxldmlzaW9uIGRvY3VtZW50YXJ5LCBGcmVlZG9tIFdyaXRlcnM6IFN0b3JpZXMgZnJvbSB0aGUgSGVhcnQgSW4gMTk5NCwgYW4gaWRlYWxpc3RpYyBmaXJzdC15ZWFyIHRlYWNoZXIgaW4gTG9uZyBCZWFjaCwgQ2FsaWZvcm5pYSwgbmFtZWQgRXJpbiBHcnV3ZWxsIGNvbmZyb250ZWQgYSByb29tIG9mIOKAnHVudGVhY2hhYmxlLCBhdC1yaXNr4oCdIHN0dWRlbnRzLiBTaGUgaGFkIGludGVyY2VwdGVkIGEgbm90ZSB3aXRoIGFuIHVnbHkgcmFjaWFsIGNhcmljYXR1cmUgYW5kIGFuZ3JpbHkgZGVjbGFyZWQgdGhhdCB0aGlzIHdhcyBwcmVjaXNlbHkgdGhlIHNvcnQgb2YgdGhpbmcgdGhhdCBsZWQgdG8gdGhlIEhvbG9jYXVzdC4gU2hlIHdhcyBtZXQgYnkgdW5jb21wcmVoZW5kaW5nIGxvb2tz4oCUbm9uZSBvZiBoZXIgc3R1ZGVudHMgaGFkIGhlYXJkIG9mIG9uZSBvZiB0aGUgZGVmaW5pbmcgbW9tZW50cyBvZiB0aGUgdHdlbnRpZXRoIGNlbnR1cnkuIFNvIHNoZSByZWJvb3RlZCBoZXIgZW50aXJlIGN1cnJpY3VsdW0sIHVzaW5nIHRyZWFzdXJlZCBib29rcyBzdWNoIGFzIEFubmUgRnJhbmvigJlzIGRpYXJ5IGFzIGhlciBndWlkZSB0byBjb21iYXQgaW50b2xlcmFuY2UgYW5kIG1pc3VuZGVyc3RhbmRpbmcuIEhlciBzdHVkZW50cyBiZWdhbiByZWNvcmRpbmcgdGhlaXIgdGhvdWdodHMgYW5kIGZlZWxpbmdzIGluIHRoZWlyIG93biBkaWFyaWVzLCBldmVudHVhbGx5IGR1YmJpbmcgdGhlbXNlbHZlcyB0aGUg4oCcRnJlZWRvbSBXcml0ZXJzLuKAnSBDb25zaXN0aW5nIG9mIHBvd2VyZnVsIGVudHJpZXMgZnJvbSB0aGUgc3R1ZGVudHPigJkgZGlhcmllcyBhbmQgbmFycmF0aXZlIHRleHQgYnkgRXJpbiBHcnV3ZWxsLCBUaGUgRnJlZWRvbSBXcml0ZXJzIERpYXJ5IGlzIGFuIHVuZm9yZ2V0dGFibGUgc3Rvcnkgb2YgaG93IGhhcmQgd29yaywgY291cmFnZSwgYW5kIGRldGVybWluYXRpb24gY2hhbmdlZCB0aGUgbGl2ZXMgb2YgYSB0ZWFjaGVyIGFuZCBoZXIgc3R1ZGVudHMuIEluIHRoZSB0d28gZGVjYWRlcyBzaW5jZSBpdHMgb3JpZ2luYWwgcHVibGljYXRpb24sIHRoZSBib29rIGhhcyBzb2xkIG1vcmUgdGhhbiBvbmUgbWlsbGlvbiBjb3BpZXMgYW5kIGluc3BpcmVkIGEgbWFqb3IgbW90aW9uIHBpY3R1cmUgRnJlZWRvbSBXcml0ZXJzLiBBbmQgbm93LCB3aXRoIHRoaXMgdHdlbnRpZXRoLWFubml2ZXJzYXJ5IGVkaXRpb24sIHJlYWRlcnMgYXJlIGJyb3VnaHQgdXAgdG8gZGF0ZSBvbiB0aGUgbGl2ZXMgb2YgdGhlIEZyZWVkb20gV3JpdGVycywgYXMgdGhleSBibGVuZCBpbmRpc3BlbnNhYmxlIHRha2VzIG9uIHNvY2lhbCBpc3N1ZXMgd2l0aCB1cGxpZnRpbmcgc3RvcmllcyBvZiBhdHRlbmRpbmcgY29sbGVnZeKAlGFuZCB3YXRjaCB0aGVpciBvd24gY2hpbGRyZW4gZm9sbG93IGluIHRoZWlyIGZvb3RzdGVwcy4gVGhlIEZyZWVkb20gV3JpdGVycyBEaWFyeSByZW1haW5zIGEgdml0YWwgcmVhZCBmb3IgYW55b25lIHdobyBiZWxpZXZlcyBpbiBzZWNvbmQgY2hhbmNlcy4iLAogICAgICAgICJpbmR1c3RyeUlkZW50aWZpZXJzIjogWwogICAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJJU0JOXzEzIiwKICAgICAgICAgICAgImlkZW50aWZpZXIiOiAiOTc4MDc2NzkyODMzNSIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogIklTQk5fMTAiLAogICAgICAgICAgICAiaWRlbnRpZmllciI6ICIwNzY3OTI4MzM0IgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInJlYWRpbmdNb2RlcyI6IHsKICAgICAgICAgICJ0ZXh0IjogdHJ1ZSwKICAgICAgICAgICJpbWFnZSI6IHRydWUKICAgICAgICB9LAogICAgICAgICJwYWdlQ291bnQiOiA0NTgsCiAgICAgICAgInByaW50VHlwZSI6ICJCT09LIiwKICAgICAgICAiY2F0ZWdvcmllcyI6IFsKICAgICAgICAgICJFZHVjYXRpb24iCiAgICAgICAgXSwKICAgICAgICAiYXZlcmFnZVJhdGluZyI6IDQuNSwKICAgICAgICAicmF0aW5nc0NvdW50IjogMjEsCiAgICAgICAgIm1hdHVyaXR5UmF0aW5nIjogIk5PVF9NQVRVUkUiLAogICAgICAgICJhbGxvd0Fub25Mb2dnaW5nIjogdHJ1ZSwKICAgICAgICAiY29udGVudFZlcnNpb24iOiAiMC4xMi4xMC4wLnByZXZpZXcuMyIsCiAgICAgICAgInBhbmVsaXphdGlvblN1bW1hcnkiOiB7CiAgICAgICAgICAiY29udGFpbnNFcHViQnViYmxlcyI6IGZhbHNlLAogICAgICAgICAgImNvbnRhaW5zSW1hZ2VCdWJibGVzIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJpbWFnZUxpbmtzIjogewogICAgICAgICAgInNtYWxsVGh1bWJuYWlsIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2NvbnRlbnQ/aWQ9Uy1KQXR0OGFIYVVDJnByaW50c2VjPWZyb250Y292ZXImaW1nPTEmem9vbT01JmVkZ2U9Y3VybCZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgICAidGh1bWJuYWlsIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2NvbnRlbnQ/aWQ9Uy1KQXR0OGFIYVVDJnByaW50c2VjPWZyb250Y292ZXImaW1nPTEmem9vbT0xJmVkZ2U9Y3VybCZzb3VyY2U9Z2JzX2FwaSIKICAgICAgICB9LAogICAgICAgICJsYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgInByZXZpZXdMaW5rIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzP2lkPVMtSkF0dDhhSGFVQyZwcmludHNlYz1mcm9udGNvdmVyJmRxPWZyZWVkb20rd3JpdGVycyZobD0mY2Q9MSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImluZm9MaW5rIjogImh0dHBzOi8vcGxheS5nb29nbGUuY29tL3N0b3JlL2Jvb2tzL2RldGFpbHM/aWQ9Uy1KQXR0OGFIYVVDJnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAiY2Fub25pY2FsVm9sdW1lTGluayI6ICJodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9ib29rcy9kZXRhaWxzP2lkPVMtSkF0dDhhSGFVQyIKICAgICAgfSwKICAgICAgInNhbGVJbmZvIjogewogICAgICAgICJjb3VudHJ5IjogIlVTIiwKICAgICAgICAic2FsZWFiaWxpdHkiOiAiRk9SX1NBTEUiLAogICAgICAgICJpc0Vib29rIjogdHJ1ZSwKICAgICAgICAibGlzdFByaWNlIjogewogICAgICAgICAgImFtb3VudCI6IDkuOTksCiAgICAgICAgICAiY3VycmVuY3lDb2RlIjogIlVTRCIKICAgICAgICB9LAogICAgICAgICJyZXRhaWxQcmljZSI6IHsKICAgICAgICAgICJhbW91bnQiOiA5Ljk5LAogICAgICAgICAgImN1cnJlbmN5Q29kZSI6ICJVU0QiCiAgICAgICAgfSwKICAgICAgICAiYnV5TGluayI6ICJodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9ib29rcy9kZXRhaWxzP2lkPVMtSkF0dDhhSGFVQyZyZGlkPWJvb2stUy1KQXR0OGFIYVVDJnJkb3Q9MSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgIm9mZmVycyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImZpbnNreU9mZmVyVHlwZSI6IDEsCiAgICAgICAgICAgICJsaXN0UHJpY2UiOiB7CiAgICAgICAgICAgICAgImFtb3VudEluTWljcm9zIjogOTk5MDAwMCwKICAgICAgICAgICAgICAiY3VycmVuY3lDb2RlIjogIlVTRCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInJldGFpbFByaWNlIjogewogICAgICAgICAgICAgICJhbW91bnRJbk1pY3JvcyI6IDk5OTAwMDAsCiAgICAgICAgICAgICAgImN1cnJlbmN5Q29kZSI6ICJVU0QiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJnaWZ0YWJsZSI6IHRydWUKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJhY2Nlc3NJbmZvIjogewogICAgICAgICJjb3VudHJ5IjogIlVTIiwKICAgICAgICAidmlld2FiaWxpdHkiOiAiUEFSVElBTCIsCiAgICAgICAgImVtYmVkZGFibGUiOiB0cnVlLAogICAgICAgICJwdWJsaWNEb21haW4iOiBmYWxzZSwKICAgICAgICAidGV4dFRvU3BlZWNoUGVybWlzc2lvbiI6ICJBTExPV0VEIiwKICAgICAgICAiZXB1YiI6IHsKICAgICAgICAgICJpc0F2YWlsYWJsZSI6IHRydWUsCiAgICAgICAgICAiYWNzVG9rZW5MaW5rIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2Rvd25sb2FkL1RoZV9GcmVlZG9tX1dyaXRlcnNfRGlhcnlfMjB0aF9Bbm5pdmVyc2Etc2FtcGxlLWVwdWIuYWNzbT9pZD1TLUpBdHQ4YUhhVUMmZm9ybWF0PWVwdWImb3V0cHV0PWFjczRfZnVsZmlsbG1lbnRfdG9rZW4mZGxfdHlwZT1zYW1wbGUmc291cmNlPWdic19hcGkiCiAgICAgICAgfSwKICAgICAgICAicGRmIjogewogICAgICAgICAgImlzQXZhaWxhYmxlIjogdHJ1ZSwKICAgICAgICAgICJhY3NUb2tlbkxpbmsiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvZG93bmxvYWQvVGhlX0ZyZWVkb21fV3JpdGVyc19EaWFyeV8yMHRoX0Fubml2ZXJzYS1zYW1wbGUtcGRmLmFjc20/aWQ9Uy1KQXR0OGFIYVVDJmZvcm1hdD1wZGYmb3V0cHV0PWFjczRfZnVsZmlsbG1lbnRfdG9rZW4mZGxfdHlwZT1zYW1wbGUmc291cmNlPWdic19hcGkiCiAgICAgICAgfSwKICAgICAgICAid2ViUmVhZGVyTGluayI6ICJodHRwOi8vcGxheS5nb29nbGUuY29tL2Jvb2tzL3JlYWRlcj9pZD1TLUpBdHQ4YUhhVUMmaGw9JnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAiYWNjZXNzVmlld1N0YXR1cyI6ICJTQU1QTEUiLAogICAgICAgICJxdW90ZVNoYXJpbmdBbGxvd2VkIjogZmFsc2UKICAgICAgfSwKICAgICAgInNlYXJjaEluZm8iOiB7CiAgICAgICAgInRleHRTbmlwcGV0IjogIkFuZCBub3csIHdpdGggdGhpcyB0d2VudGlldGgtYW5uaXZlcnNhcnkgZWRpdGlvbiwgcmVhZGVycyBhcmUgYnJvdWdodCB1cCB0byBkYXRlIG9uIHRoZSBsaXZlcyBvZiB0aGUgRnJlZWRvbSBXcml0ZXJzLCBhcyB0aGV5IGJsZW5kIGluZGlzcGVuc2FibGUgdGFrZXMgb24gc29jaWFsIGlzc3VlcyB3aXRoIHVwbGlmdGluZyBzdG9yaWVzIG9mIGF0dGVuZGluZyBjb2xsZWdl4oCUYW5kIHdhdGNoIHRoZWlyIG93biAuLi4iCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogImJvb2tzI3ZvbHVtZSIsCiAgICAgICJpZCI6ICIxNHRiVGtRTkFBQUMiLAogICAgICAiZXRhZyI6ICJTSEEwaHVaYVZiTSIsCiAgICAgICJzZWxmTGluayI6ICJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9ib29rcy92MS92b2x1bWVzLzE0dGJUa1FOQUFBQyIsCiAgICAgICJ2b2x1bWVJbmZvIjogewogICAgICAgICJ0aXRsZSI6ICJUaGUgRnJlZWRvbSBXcml0ZXJzIERpYXJ5ICgyMHRoIEFubml2ZXJzYXJ5IEVkaXRpb24pIiwKICAgICAgICAic3VidGl0bGUiOiAiSG93IGEgVGVhY2hlciBhbmQgMTUwIFRlZW5zIFVzZWQgV3JpdGluZyB0byBDaGFuZ2UgVGhlbXNlbHZlcyBhbmQgdGhlIFdvcmxkIEFyb3VuZCBUaGVtIiwKICAgICAgICAiYXV0aG9ycyI6IFsKICAgICAgICAgICJUaGUgRnJlZWRvbSBXcml0ZXJzIiwKICAgICAgICAgICJFcmluIEdydXdlbGwiCiAgICAgICAgXSwKICAgICAgICAicHVibGlzaGVyIjogIkNyb3duIiwKICAgICAgICAicHVibGlzaGVkRGF0ZSI6ICIxOTk5LTEwLTEyIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiIzEgTkVXIFlPUksgVElNRVMgQkVTVFNFTExFUiDigKIgVGhlIHR3ZW50aWV0aCBhbm5pdmVyc2FyeSBlZGl0aW9uIG9mIHRoZSBjbGFzc2ljIHN0b3J5IG9mIGFuIGluY3JlZGlibGUgZ3JvdXAgb2Ygc3R1ZGVudHMgYW5kIHRoZSB0ZWFjaGVyIHdobyBpbnNwaXJlZCB0aGVtLCBmZWF0dXJpbmcgdXBkYXRlcyBvbiB0aGUgc3R1ZGVudHPigJkgbGl2ZXMsIG5ldyBqb3VybmFsIGVudHJpZXMsIGFuZCBhbiBpbnRyb2R1Y3Rpb24gYnkgRXJpbiBHcnV3ZWxsIE5vdyBhIHB1YmxpYyB0ZWxldmlzaW9uIGRvY3VtZW50YXJ5LCBGcmVlZG9tIFdyaXRlcnM6IFN0b3JpZXMgZnJvbSB0aGUgSGVhcnQgSW4gMTk5NCwgYW4gaWRlYWxpc3RpYyBmaXJzdC15ZWFyIHRlYWNoZXIgaW4gTG9uZyBCZWFjaCwgQ2FsaWZvcm5pYSwgbmFtZWQgRXJpbiBHcnV3ZWxsIGNvbmZyb250ZWQgYSByb29tIG9mIOKAnHVudGVhY2hhYmxlLCBhdC1yaXNr4oCdIHN0dWRlbnRzLiBTaGUgaGFkIGludGVyY2VwdGVkIGEgbm90ZSB3aXRoIGFuIHVnbHkgcmFjaWFsIGNhcmljYXR1cmUgYW5kIGFuZ3JpbHkgZGVjbGFyZWQgdGhhdCB0aGlzIHdhcyBwcmVjaXNlbHkgdGhlIHNvcnQgb2YgdGhpbmcgdGhhdCBsZWQgdG8gdGhlIEhvbG9jYXVzdC4gU2hlIHdhcyBtZXQgYnkgdW5jb21wcmVoZW5kaW5nIGxvb2tz4oCUbm9uZSBvZiBoZXIgc3R1ZGVudHMgaGFkIGhlYXJkIG9mIG9uZSBvZiB0aGUgZGVmaW5pbmcgbW9tZW50cyBvZiB0aGUgdHdlbnRpZXRoIGNlbnR1cnkuIFNvIHNoZSByZWJvb3RlZCBoZXIgZW50aXJlIGN1cnJpY3VsdW0sIHVzaW5nIHRyZWFzdXJlZCBib29rcyBzdWNoIGFzIEFubmUgRnJhbmvigJlzIGRpYXJ5IGFzIGhlciBndWlkZSB0byBjb21iYXQgaW50b2xlcmFuY2UgYW5kIG1pc3VuZGVyc3RhbmRpbmcuIEhlciBzdHVkZW50cyBiZWdhbiByZWNvcmRpbmcgdGhlaXIgdGhvdWdodHMgYW5kIGZlZWxpbmdzIGluIHRoZWlyIG93biBkaWFyaWVzLCBldmVudHVhbGx5IGR1YmJpbmcgdGhlbXNlbHZlcyB0aGUg4oCcRnJlZWRvbSBXcml0ZXJzLuKAnSBDb25zaXN0aW5nIG9mIHBvd2VyZnVsIGVudHJpZXMgZnJvbSB0aGUgc3R1ZGVudHPigJkgZGlhcmllcyBhbmQgbmFycmF0aXZlIHRleHQgYnkgRXJpbiBHcnV3ZWxsLCBUaGUgRnJlZWRvbSBXcml0ZXJzIERpYXJ5IGlzIGFuIHVuZm9yZ2V0dGFibGUgc3Rvcnkgb2YgaG93IGhhcmQgd29yaywgY291cmFnZSwgYW5kIGRldGVybWluYXRpb24gY2hhbmdlZCB0aGUgbGl2ZXMgb2YgYSB0ZWFjaGVyIGFuZCBoZXIgc3R1ZGVudHMuIEluIHRoZSB0d28gZGVjYWRlcyBzaW5jZSBpdHMgb3JpZ2luYWwgcHVibGljYXRpb24sIHRoZSBib29rIGhhcyBzb2xkIG1vcmUgdGhhbiBvbmUgbWlsbGlvbiBjb3BpZXMgYW5kIGluc3BpcmVkIGEgbWFqb3IgbW90aW9uIHBpY3R1cmUgRnJlZWRvbSBXcml0ZXJzLiBBbmQgbm93LCB3aXRoIHRoaXMgdHdlbnRpZXRoLWFubml2ZXJzYXJ5IGVkaXRpb24sIHJlYWRlcnMgYXJlIGJyb3VnaHQgdXAgdG8gZGF0ZSBvbiB0aGUgbGl2ZXMgb2YgdGhlIEZyZWVkb20gV3JpdGVycywgYXMgdGhleSBibGVuZCBpbmRpc3BlbnNhYmxlIHRha2VzIG9uIHNvY2lhbCBpc3N1ZXMgd2l0aCB1cGxpZnRpbmcgc3RvcmllcyBvZiBhdHRlbmRpbmcgY29sbGVnZeKAlGFuZCB3YXRjaCB0aGVpciBvd24gY2hpbGRyZW4gZm9sbG93IGluIHRoZWlyIGZvb3RzdGVwcy4gVGhlIEZyZWVkb20gV3JpdGVycyBEaWFyeSByZW1haW5zIGEgdml0YWwgcmVhZCBmb3IgYW55b25lIHdobyBiZWxpZXZlcyBpbiBzZWNvbmQgY2hhbmNlcy4iLAogICAgICAgICJpbmR1c3RyeUlkZW50aWZpZXJzIjogWwogICAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJJU0JOXzEzIiwKICAgICAgICAgICAgImlkZW50aWZpZXIiOiAiOTc4MDM4NTQ5NDIyOSIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogIklTQk5fMTAiLAogICAgICAgICAgICAiaWRlbnRpZmllciI6ICIwMzg1NDk0MjJYIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInJlYWRpbmdNb2RlcyI6IHsKICAgICAgICAgICJ0ZXh0IjogZmFsc2UsCiAgICAgICAgICAiaW1hZ2UiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgInBhZ2VDb3VudCI6IDQ1OCwKICAgICAgICAicHJpbnRUeXBlIjogIkJPT0siLAogICAgICAgICJjYXRlZ29yaWVzIjogWwogICAgICAgICAgIkVkdWNhdGlvbiIKICAgICAgICBdLAogICAgICAgICJhdmVyYWdlUmF0aW5nIjogNC41LAogICAgICAgICJyYXRpbmdzQ291bnQiOiAxNCwKICAgICAgICAibWF0dXJpdHlSYXRpbmciOiAiTk9UX01BVFVSRSIsCiAgICAgICAgImFsbG93QW5vbkxvZ2dpbmciOiBmYWxzZSwKICAgICAgICAiY29udGVudFZlcnNpb24iOiAiMC43LjQuMC5wcmV2aWV3LjAiLAogICAgICAgICJwYW5lbGl6YXRpb25TdW1tYXJ5IjogewogICAgICAgICAgImNvbnRhaW5zRXB1YkJ1YmJsZXMiOiBmYWxzZSwKICAgICAgICAgICJjb250YWluc0ltYWdlQnViYmxlcyI6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICAiaW1hZ2VMaW5rcyI6IHsKICAgICAgICAgICJzbWFsbFRodW1ibmFpbCI6ICJodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcy9jb250ZW50P2lkPTE0dGJUa1FOQUFBQyZwcmludHNlYz1mcm9udGNvdmVyJmltZz0xJnpvb209NSZlZGdlPWN1cmwmc291cmNlPWdic19hcGkiLAogICAgICAgICAgInRodW1ibmFpbCI6ICJodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcy9jb250ZW50P2lkPTE0dGJUa1FOQUFBQyZwcmludHNlYz1mcm9udGNvdmVyJmltZz0xJnpvb209MSZlZGdlPWN1cmwmc291cmNlPWdic19hcGkiCiAgICAgICAgfSwKICAgICAgICAibGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICJwcmV2aWV3TGluayI6ICJodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcz9pZD0xNHRiVGtRTkFBQUMmcHJpbnRzZWM9ZnJvbnRjb3ZlciZkcT1mcmVlZG9tK3dyaXRlcnMmaGw9JmNkPTImc291cmNlPWdic19hcGkiLAogICAgICAgICJpbmZvTGluayI6ICJodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcz9pZD0xNHRiVGtRTkFBQUMmZHE9ZnJlZWRvbSt3cml0ZXJzJmhsPSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImNhbm9uaWNhbFZvbHVtZUxpbmsiOiAiaHR0cHM6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2Fib3V0L1RoZV9GcmVlZG9tX1dyaXRlcnNfRGlhcnlfMjB0aF9Bbm5pdmVyc2EuaHRtbD9obD0maWQ9MTR0YlRrUU5BQUFDIgogICAgICB9LAogICAgICAic2FsZUluZm8iOiB7CiAgICAgICAgImNvdW50cnkiOiAiVVMiLAogICAgICAgICJzYWxlYWJpbGl0eSI6ICJOT1RfRk9SX1NBTEUiLAogICAgICAgICJpc0Vib29rIjogZmFsc2UKICAgICAgfSwKICAgICAgImFjY2Vzc0luZm8iOiB7CiAgICAgICAgImNvdW50cnkiOiAiVVMiLAogICAgICAgICJ2aWV3YWJpbGl0eSI6ICJQQVJUSUFMIiwKICAgICAgICAiZW1iZWRkYWJsZSI6IHRydWUsCiAgICAgICAgInB1YmxpY0RvbWFpbiI6IGZhbHNlLAogICAgICAgICJ0ZXh0VG9TcGVlY2hQZXJtaXNzaW9uIjogIkFMTE9XRUQiLAogICAgICAgICJlcHViIjogewogICAgICAgICAgImlzQXZhaWxhYmxlIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJwZGYiOiB7CiAgICAgICAgICAiaXNBdmFpbGFibGUiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgIndlYlJlYWRlckxpbmsiOiAiaHR0cDovL3BsYXkuZ29vZ2xlLmNvbS9ib29rcy9yZWFkZXI/aWQ9MTR0YlRrUU5BQUFDJmhsPSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImFjY2Vzc1ZpZXdTdGF0dXMiOiAiU0FNUExFIiwKICAgICAgICAicXVvdGVTaGFyaW5nQWxsb3dlZCI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJzZWFyY2hJbmZvIjogewogICAgICAgICJ0ZXh0U25pcHBldCI6ICJBbmQgbm93LCB3aXRoIHRoaXMgdHdlbnRpZXRoLWFubml2ZXJzYXJ5IGVkaXRpb24sIHJlYWRlcnMgYXJlIGJyb3VnaHQgdXAgdG8gZGF0ZSBvbiB0aGUgbGl2ZXMgb2YgdGhlIEZyZWVkb20gV3JpdGVycywgYXMgdGhleSBibGVuZCBpbmRpc3BlbnNhYmxlIHRha2VzIG9uIHNvY2lhbCBpc3N1ZXMgd2l0aCB1cGxpZnRpbmcgc3RvcmllcyBvZiBhdHRlbmRpbmcgY29sbGVnZeKAlGFuZCB3YXRjaCB0aGVpciBvd24gLi4uIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJib29rcyN2b2x1bWUiLAogICAgICAiaWQiOiAidkc5aUVBQUFRQkFKIiwKICAgICAgImV0YWciOiAiY09VSlY3OFgwblkiLAogICAgICAic2VsZkxpbmsiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYm9va3MvdjEvdm9sdW1lcy92RzlpRUFBQVFCQUoiLAogICAgICAidm9sdW1lSW5mbyI6IHsKICAgICAgICAidGl0bGUiOiAiRGVhciBGcmVlZG9tIFdyaXRlciIsCiAgICAgICAgInN1YnRpdGxlIjogIlN0b3JpZXMgb2YgSGFyZHNoaXAgYW5kIEhvcGUgZnJvbSB0aGUgTmV4dCBHZW5lcmF0aW9uIiwKICAgICAgICAiYXV0aG9ycyI6IFsKICAgICAgICAgICJUaGUgRnJlZWRvbSBXcml0ZXJzIiwKICAgICAgICAgICJFcmluIEdydXdlbGwiCiAgICAgICAgXSwKICAgICAgICAicHVibGlzaGVyIjogIkNyb3duIiwKICAgICAgICAicHVibGlzaGVkRGF0ZSI6ICIyMDIyLTAzLTI5IiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHN0dWRlbnRzIG9mIHRvZGF5IHRlbGwgdGhlaXIgc3RvcmllcyBvZiBhZHZlcnNpdHkgYW5kIGdyb3d0aCBpbiBsZXR0ZXJzIHRvIHRoZSBvcmlnaW5hbCBGcmVlZG9tIFdyaXRlcnPigJRhdXRob3JzIG9mIHRoZSAjMSBOZXcgWW9yayBUaW1lcyBiZXN0c2VsbGVyIFRoZSBGcmVlZG9tIFdyaXRlcnMgRGlhcnnigJR3aG8gd3JpdGUgc3VwcG9ydGl2ZSBhbmQgcG93ZXJmdWwgbGV0dGVycyBpbiByZXNwb25zZS4gT3ZlciB0d2VudHkgeWVhcnMgYWdvLCB0aGUgc3R1ZGVudHMgaW4gZmlyc3QteWVhciB0ZWFjaGVyIEVyaW4gR3J1d2VsbOKAmXMgaGlnaCBzY2hvb2wgY2xhc3MgaW4gTG9uZyBCZWFjaCwgQ2FsaWZvcm5pYSwgd2VyZSBsYWJlbGVkIOKAnHVudGVhY2hhYmxl4oCd4oCUYnV0IHNoZSBzYXcgcGFzdCB0aGF0LiBJbnN0ZWFkIG9mIHRyZWF0aW5nIHRoZW0gYXMgc2NvcmVzIG9uIGEgdGVzdCwgc2hlIHVuZGVyc3Rvb2QgdGhhdCBlYWNoIG9mIHRoZW0gaGFkIGEgdW5pcXVlIHN0b3J5IHRvIHRlbGwuIEluc3BpcmVkIGJ5IGJvb2tzIGxpa2UgQW5uZSBGcmFua+KAmXMgZGlhcnksIGhlciBzdHVkZW50cyBiZWdhbiB3cml0aW5nIHRoZWlyIG93biBkaWFyaWVzLCBldmVudHVhbGx5IGR1YmJpbmcgdGhlbXNlbHZlcyB0aGUgRnJlZWRvbSBXcml0ZXJzLiBUb2dldGhlciwgdGhleSBjby1hdXRob3JlZCBUaGUgRnJlZWRvbSBXcml0ZXJzIERpYXJ5LCB3aGljaCBsYXVuY2hlZCBhIG1vdmVtZW50IHRoYXQgcmVtYWlucyBpbmNyZWRpYmx5IHJlbGV2YW50IGFuZCBpbXBhY3RmdWwgdG9kYXkuIFRoZWlyIHN0b3JpZXMgc3BlYWsgdG8geW91bmcgcGVvcGxlIHdobyBmZWVsIGFzIGlmIHRob3NlIGFyb3VuZCB0aGVtIGRvIG5vdCBjYXJlIGFib3V0IHRoZWlyIGxpdmVzLCB0aGVpciBmZWVsaW5ncywgYW5kIHRoZWlyIHN0cnVnZ2xlcy4gVGhleSB3YW50IHRvIGJlIGhlYXJkOyB0aGV5IHdhbnQgdG8gYmUgc2Vlbi4gSW4gRGVhciBGcmVlZG9tIFdyaXRlciwgdGhlIG5leHQgZ2VuZXJhdGlvbiBvZiBGcmVlZG9tIFdyaXRlcnMgc2hhcmVzIGl0cyBzdHJ1Z2dsZXMgd2l0aCBhYnVzZSwgcmFjaXNtLCBkaXNjcmltaW5hdGlvbiwgcG92ZXJ0eSwgbWVudGFsIGhlYWx0aCwgaW1wb3NlZCBib3JkZXJzLCBMR0JUUUlBKyBpZGVudGl0eSwgYW5kIHBvbGljZSB2aW9sZW5jZS4gRWFjaCBzdG9yeSBpcyBhbnN3ZXJlZCB3aXRoIGEgbGV0dGVyIG9mIGFkdmljZSBmcm9tIGFuIG9yaWdpbmFsIEZyZWVkb20gV3JpdGVyLiBXaXRoIGVtcGF0aHkgYW5kIGhvbmVzdHksIHRoZXkgYWRkcmVzcyB0aGVzZSB5b3VuZyBwZW9wbGUgbm90IHdpdGggdGhlIHBsYXRpdHVkZXMgb2YgYSBwb2xpdGljaWFuIG9yIGEgY2VsZWJyaXR5LCBidXQgd2l0aCB0aGUgcHJhZ21hdGljIGFkdmljZSBvZiBwZW9wbGUgd2hvIGhhdmUgZGVhbHQgd2l0aCB0aGVzZSBzYW1lIGlzc3VlcyBhbmQgY29tZSBvdXQgb24gdGhlIG90aGVyIHNpZGUuIFRocm91Z2ggaXRzIGV5ZS1vcGVuaW5nIGFuZCBpbnNwaXJpbmcgc3RvcmllcywgRGVhciBGcmVlZG9tIFdyaXRlciBwYWludHMgYW4gdW5mbGluY2hpbmdseSBob25lc3QgcG9ydHJhaXQgb2YgdG9kYXnigJlzIHlvdXRoIGFuZCBvZmZlcnMgYSBwb3dlcmZ1bCBtZXNzYWdlIG9mIHBlcnNldmVyYW5jZSwgdW5kZXJzdGFuZGluZywgYW5kIGhvcGUuIiwKICAgICAgICAiaW5kdXN0cnlJZGVudGlmaWVycyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAiSVNCTl8xMyIsCiAgICAgICAgICAgICJpZGVudGlmaWVyIjogIjk3ODA1OTMyMzk4NjUiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJJU0JOXzEwIiwKICAgICAgICAgICAgImlkZW50aWZpZXIiOiAiMDU5MzIzOTg2NSIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJyZWFkaW5nTW9kZXMiOiB7CiAgICAgICAgICAidGV4dCI6IGZhbHNlLAogICAgICAgICAgImltYWdlIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJwYWdlQ291bnQiOiA0NDksCiAgICAgICAgInByaW50VHlwZSI6ICJCT09LIiwKICAgICAgICAiY2F0ZWdvcmllcyI6IFsKICAgICAgICAgICJFZHVjYXRpb24iCiAgICAgICAgXSwKICAgICAgICAibWF0dXJpdHlSYXRpbmciOiAiTk9UX01BVFVSRSIsCiAgICAgICAgImFsbG93QW5vbkxvZ2dpbmciOiBmYWxzZSwKICAgICAgICAiY29udGVudFZlcnNpb24iOiAiMC4xLjAuMC5wcmV2aWV3LjAiLAogICAgICAgICJwYW5lbGl6YXRpb25TdW1tYXJ5IjogewogICAgICAgICAgImNvbnRhaW5zRXB1YkJ1YmJsZXMiOiBmYWxzZSwKICAgICAgICAgICJjb250YWluc0ltYWdlQnViYmxlcyI6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICAiaW1hZ2VMaW5rcyI6IHsKICAgICAgICAgICJzbWFsbFRodW1ibmFpbCI6ICJodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcy9jb250ZW50P2lkPXZHOWlFQUFBUUJBSiZwcmludHNlYz1mcm9udGNvdmVyJmltZz0xJnpvb209NSZlZGdlPWN1cmwmc291cmNlPWdic19hcGkiLAogICAgICAgICAgInRodW1ibmFpbCI6ICJodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcy9jb250ZW50P2lkPXZHOWlFQUFBUUJBSiZwcmludHNlYz1mcm9udGNvdmVyJmltZz0xJnpvb209MSZlZGdlPWN1cmwmc291cmNlPWdic19hcGkiCiAgICAgICAgfSwKICAgICAgICAibGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICJwcmV2aWV3TGluayI6ICJodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcz9pZD12RzlpRUFBQVFCQUomcHJpbnRzZWM9ZnJvbnRjb3ZlciZkcT1mcmVlZG9tK3dyaXRlcnMmaGw9JmNkPTMmc291cmNlPWdic19hcGkiLAogICAgICAgICJpbmZvTGluayI6ICJodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcz9pZD12RzlpRUFBQVFCQUomZHE9ZnJlZWRvbSt3cml0ZXJzJmhsPSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImNhbm9uaWNhbFZvbHVtZUxpbmsiOiAiaHR0cHM6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2Fib3V0L0RlYXJfRnJlZWRvbV9Xcml0ZXIuaHRtbD9obD0maWQ9dkc5aUVBQUFRQkFKIgogICAgICB9LAogICAgICAic2FsZUluZm8iOiB7CiAgICAgICAgImNvdW50cnkiOiAiVVMiLAogICAgICAgICJzYWxlYWJpbGl0eSI6ICJOT1RfRk9SX1NBTEUiLAogICAgICAgICJpc0Vib29rIjogZmFsc2UKICAgICAgfSwKICAgICAgImFjY2Vzc0luZm8iOiB7CiAgICAgICAgImNvdW50cnkiOiAiVVMiLAogICAgICAgICJ2aWV3YWJpbGl0eSI6ICJQQVJUSUFMIiwKICAgICAgICAiZW1iZWRkYWJsZSI6IHRydWUsCiAgICAgICAgInB1YmxpY0RvbWFpbiI6IGZhbHNlLAogICAgICAgICJ0ZXh0VG9TcGVlY2hQZXJtaXNzaW9uIjogIkFMTE9XRUQiLAogICAgICAgICJlcHViIjogewogICAgICAgICAgImlzQXZhaWxhYmxlIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJwZGYiOiB7CiAgICAgICAgICAiaXNBdmFpbGFibGUiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgIndlYlJlYWRlckxpbmsiOiAiaHR0cDovL3BsYXkuZ29vZ2xlLmNvbS9ib29rcy9yZWFkZXI/aWQ9dkc5aUVBQUFRQkFKJmhsPSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImFjY2Vzc1ZpZXdTdGF0dXMiOiAiU0FNUExFIiwKICAgICAgICAicXVvdGVTaGFyaW5nQWxsb3dlZCI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJzZWFyY2hJbmZvIjogewogICAgICAgICJ0ZXh0U25pcHBldCI6ICJJbiBEZWFyIEZyZWVkb20gV3JpdGVyLCB0aGUgbmV4dCBnZW5lcmF0aW9uIG9mIEZyZWVkb20gV3JpdGVycyBzaGFyZXMgaXRzIHN0cnVnZ2xlcyB3aXRoIGFidXNlLCByYWNpc20sIGRpc2NyaW1pbmF0aW9uLCBwb3ZlcnR5LCBtZW50YWwgaGVhbHRoLCBpbXBvc2VkIGJvcmRlcnMsIExHQlRRSUErIGlkZW50aXR5LCBhbmQgcG9saWNlIHZpb2xlbmNlLiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAiYm9va3Mjdm9sdW1lIiwKICAgICAgImlkIjogIjJHRTlEd0FBUUJBSiIsCiAgICAgICJldGFnIjogImd1aWFXQk8xbllzIiwKICAgICAgInNlbGZMaW5rIjogImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2Jvb2tzL3YxL3ZvbHVtZXMvMkdFOUR3QUFRQkFKIiwKICAgICAgInZvbHVtZUluZm8iOiB7CiAgICAgICAgInRpdGxlIjogIlRlYWNoIHdpdGggWW91ciBIZWFydCIsCiAgICAgICAgInN1YnRpdGxlIjogIkxlc3NvbnMgSSBMZWFybmVkIGZyb20gVGhlIEZyZWVkb20gV3JpdGVycyIsCiAgICAgICAgImF1dGhvcnMiOiBbCiAgICAgICAgICAiRXJpbiBHcnV3ZWxsIgogICAgICAgIF0sCiAgICAgICAgInB1Ymxpc2hlciI6ICJDcm93biIsCiAgICAgICAgInB1Ymxpc2hlZERhdGUiOiAiMjAwOC0wMS0xNSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBleHRyYW9yZGluYXJ5IG1lbW9pciBvZiB0aGUgIzEgTmV3IFlvcmsgVGltZXMgYmVzdHNlbGxpbmcgYXV0aG9yIG9mIFRoZSBGcmVlZG9tIFdyaXRlcnMgRGlhcnksIHdob+KAmXMgYmVlbiBoYWlsZWQgYXMg4oCcYSB0cnVlIGluc3BpcmF0aW9u4oCdIChIaWxhcnkgU3dhbmspIGFuZCDigJxzaW1wbHkgbWFnaWNhbCB3aGVuIGl0IGNvbWVzIHRvIGluc3BpcmluZyBwZW9wbGUgdG8gYWN0aW9u4oCdIChMb3MgQW5nZWxlcyBUaW1lcykuIERvbuKAmXQgbWlzcyB0aGUgcHVibGljIHRlbGV2aXNpb24gZG9jdW1lbnRhcnkgRnJlZWRvbSBXcml0ZXJzOiBTdG9yaWVzIGZyb20gdGhlIEhlYXJ0IEluIHRoaXMgcGFzc2lvbmF0ZSwgcG9pZ25hbnQsIGFuZCBkZWVwbHkgcGVyc29uYWwgbWVtb2lyIGFuZCBjYWxsIHRvIGFybXMsIEVyaW4gR3J1d2VsbCwgdGhlIGR5bmFtaWMgdGVhY2hlciB3aG8gbnVydHVyZWQgYW4gZXh0cmFvcmRpbmFyeSBncm91cCBvZiBoaWdoIHNjaG9vbCBzdHVkZW50cyBmcm9tIExvbmcgQmVhY2gsIENhbGlmb3JuaWEsIHdobyBjYWxsZWQgdGhlbXNlbHZlcyB0aGUgRnJlZWRvbSBXcml0ZXJzLCBwaWNrcyB1cCB3aGVyZSBUaGUgRnJlZWRvbSBXcml0ZXJzIERpYXJ54oCUYW5kIHRoZSBoaXQgbW92aWUgRnJlZWRvbSBXcml0ZXJz4oCUbGVmdCBvZmYgYW5kIGJyaW5ncyB0aGUgcmVhZGVyIHVwIHRvIGRhdGUgb24gd2hlcmUgdGhlIEZyZWVkb20gV3JpdGVycyBhcmUgdG9kYXkuIEluY2x1ZGluZyB0aGVpciB1bmZvcmdldHRhYmxlIHRyaXAgdG8gQXVzY2h3aXR6LCB3aGVyZSB0aGV5IG1ldCB3aXRoIEhvbG9jYXVzdCBzdXJ2aXZvcnM7IHRoZWlyIHRvdXIgb2YgdGhlIGF0dGljIG9mIHRoZWlyIGJlbG92ZWQgQW5uZSBGcmFuazsgYW5kIHRoZWlyIHZpc2l0IHRvIEJvc25pYSB3aXRoIHRoZWlyIGZyaWVuZCBabGF0YSBGaWxpcG92acSHLCBUZWFjaCBXaXRoIFlvdXIgSGVhcnQgY2hyb25pY2xlcyB3aGF0IGhhcHBlbmVkIHdpdGggdGhlIEZyZWVkb20gV3JpdGVycyBhcyB0aGV5IG1hZGUgdGhlaXIgd2F5IHRocm91Z2ggY29sbGVnZSBhbmQgYmV5b25kLiBBbG9uZyB0aGUgd2F5LCBHcnV3ZWxsIGluY2x1ZGVzIGxlc3NvbnMgZm9yIHBhcmVudHMgYW5kIHRlYWNoZXJzIGFib3V0IHdoYXQgc2hlIGxlYXJuZWQgZnJvbSBoZXIgcmVtYXJrYWJsZSBiYW5kIG9mIHN0dWRlbnRzIGFzIHNoZSB0cmF2ZWxlZCB0aHJvdWdoIHRoZSBlbW90aW9uYWwgcGVha3MgYW5kIHZhbGxleXMgb24gdGhlIGZyb250IGxpbmVzIG9mIG91ciBuYXRpb27igJlzIGVkdWNhdGlvbmFsIHN5c3RlbS4gQSBtZXNtZXJpemluZyBzdG9yeSBvZiBvbmUgeW91bmcgd29tYW7igJlzIHBlcnNvbmFsIG9keXNzZXkgYW5kIG9mIGhlciB1bmlxdWUgYWJpbGl0eSB0byBlbmNvdXJhZ2Ugb3RoZXJzIHRvIGZvbGxvdyBpbiBoZXIgZm9vdHN0ZXBzLCBUZWFjaCBXaXRoIFlvdXIgSGVhcnQgaXMgbWFya2VkIGJ5IHRoZSBlbnZpYWJsZSByYWRpYW5jZSBhbmQgaXJyZXByZXNzaWJsZSBmb3JjZSBvZiBuYXR1cmUgdGhhdCBhcmUgRXJpbiBHcnV3ZWxsIGFuZCBoZXIgdW5iZWxpZXZhYmxlIGRldGVybWluYXRpb24gdG8gZW5zdXJlIHRoYXQgZWR1Y2F0aW9uIGluIHRoZSBVbml0ZWQgU3RhdGVzIHRydWx5IG1lZXRzIHRoZSBuZWVkcyBvZiBldmVyeSBzdHVkZW50LiIsCiAgICAgICAgImluZHVzdHJ5SWRlbnRpZmllcnMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogIklTQk5fMTMiLAogICAgICAgICAgICAiaWRlbnRpZmllciI6ICI5NzgwNzY3OTE1ODQ3IgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAiSVNCTl8xMCIsCiAgICAgICAgICAgICJpZGVudGlmaWVyIjogIjA3Njc5MTU4NDQiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicmVhZGluZ01vZGVzIjogewogICAgICAgICAgInRleHQiOiBmYWxzZSwKICAgICAgICAgICJpbWFnZSI6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICAicGFnZUNvdW50IjogMjc0LAogICAgICAgICJwcmludFR5cGUiOiAiQk9PSyIsCiAgICAgICAgImNhdGVnb3JpZXMiOiBbCiAgICAgICAgICAiQmlvZ3JhcGh5ICYgQXV0b2Jpb2dyYXBoeSIKICAgICAgICBdLAogICAgICAgICJtYXR1cml0eVJhdGluZyI6ICJOT1RfTUFUVVJFIiwKICAgICAgICAiYWxsb3dBbm9uTG9nZ2luZyI6IGZhbHNlLAogICAgICAgICJjb250ZW50VmVyc2lvbiI6ICIwLjQuMC4wLnByZXZpZXcuMCIsCiAgICAgICAgInBhbmVsaXphdGlvblN1bW1hcnkiOiB7CiAgICAgICAgICAiY29udGFpbnNFcHViQnViYmxlcyI6IGZhbHNlLAogICAgICAgICAgImNvbnRhaW5zSW1hZ2VCdWJibGVzIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJpbWFnZUxpbmtzIjogewogICAgICAgICAgInNtYWxsVGh1bWJuYWlsIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2NvbnRlbnQ/aWQ9MkdFOUR3QUFRQkFKJnByaW50c2VjPWZyb250Y292ZXImaW1nPTEmem9vbT01JmVkZ2U9Y3VybCZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgICAidGh1bWJuYWlsIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2NvbnRlbnQ/aWQ9MkdFOUR3QUFRQkFKJnByaW50c2VjPWZyb250Y292ZXImaW1nPTEmem9vbT0xJmVkZ2U9Y3VybCZzb3VyY2U9Z2JzX2FwaSIKICAgICAgICB9LAogICAgICAgICJsYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgInByZXZpZXdMaW5rIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzP2lkPTJHRTlEd0FBUUJBSiZwcmludHNlYz1mcm9udGNvdmVyJmRxPWZyZWVkb20rd3JpdGVycyZobD0mY2Q9NCZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImluZm9MaW5rIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzP2lkPTJHRTlEd0FBUUJBSiZkcT1mcmVlZG9tK3dyaXRlcnMmaGw9JnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAiY2Fub25pY2FsVm9sdW1lTGluayI6ICJodHRwczovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvYWJvdXQvVGVhY2hfd2l0aF9Zb3VyX0hlYXJ0Lmh0bWw/aGw9JmlkPTJHRTlEd0FBUUJBSiIKICAgICAgfSwKICAgICAgInNhbGVJbmZvIjogewogICAgICAgICJjb3VudHJ5IjogIlVTIiwKICAgICAgICAic2FsZWFiaWxpdHkiOiAiTk9UX0ZPUl9TQUxFIiwKICAgICAgICAiaXNFYm9vayI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJhY2Nlc3NJbmZvIjogewogICAgICAgICJjb3VudHJ5IjogIlVTIiwKICAgICAgICAidmlld2FiaWxpdHkiOiAiUEFSVElBTCIsCiAgICAgICAgImVtYmVkZGFibGUiOiB0cnVlLAogICAgICAgICJwdWJsaWNEb21haW4iOiBmYWxzZSwKICAgICAgICAidGV4dFRvU3BlZWNoUGVybWlzc2lvbiI6ICJBTExPV0VEIiwKICAgICAgICAiZXB1YiI6IHsKICAgICAgICAgICJpc0F2YWlsYWJsZSI6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICAicGRmIjogewogICAgICAgICAgImlzQXZhaWxhYmxlIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJ3ZWJSZWFkZXJMaW5rIjogImh0dHA6Ly9wbGF5Lmdvb2dsZS5jb20vYm9va3MvcmVhZGVyP2lkPTJHRTlEd0FBUUJBSiZobD0mc291cmNlPWdic19hcGkiLAogICAgICAgICJhY2Nlc3NWaWV3U3RhdHVzIjogIlNBTVBMRSIsCiAgICAgICAgInF1b3RlU2hhcmluZ0FsbG93ZWQiOiBmYWxzZQogICAgICB9LAogICAgICAic2VhcmNoSW5mbyI6IHsKICAgICAgICAidGV4dFNuaXBwZXQiOiAiQSBtZXNtZXJpemluZyBzdG9yeSBvZiBvbmUgeW91bmcgd29tYW7igJlzIHBlcnNvbmFsIG9keXNzZXkgYW5kIG9mIGhlciB1bmlxdWUgYWJpbGl0eSB0byBlbmNvdXJhZ2Ugb3RoZXJzIHRvIGZvbGxvdyBpbiBoZXIgZm9vdHN0ZXBzLCBUZWFjaCBXaXRoIFlvdXIgSGVhcnQgaXMgbWFya2VkIGJ5IHRoZSBlbnZpYWJsZSByYWRpYW5jZSBhbmQgaXJyZXByZXNzaWJsZSBmb3JjZSBvZiBuYXR1cmUgdGhhdCBhcmUgRXJpbiAuLi4iCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogImJvb2tzI3ZvbHVtZSIsCiAgICAgICJpZCI6ICJXXzF2RHdBQVFCQUoiLAogICAgICAiZXRhZyI6ICIvMWlUVUUvcGdvayIsCiAgICAgICJzZWxmTGluayI6ICJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9ib29rcy92MS92b2x1bWVzL1dfMXZEd0FBUUJBSiIsCiAgICAgICJ2b2x1bWVJbmZvIjogewogICAgICAgICJ0aXRsZSI6ICJUZWFjaGluZyBIb3BlIiwKICAgICAgICAic3VidGl0bGUiOiAiU3RvcmllcyBmcm9tIHRoZSBGcmVlZG9tIFdyaXRlciBUZWFjaGVycyBhbmQgRXJpbiBHcnV3ZWxsIiwKICAgICAgICAiYXV0aG9ycyI6IFsKICAgICAgICAgICJUaGUgRnJlZWRvbSBXcml0ZXJzIiwKICAgICAgICAgICJFcmluIEdydXdlbGwiCiAgICAgICAgXSwKICAgICAgICAicHVibGlzaGVyIjogIkNyb3duIiwKICAgICAgICAicHVibGlzaGVkRGF0ZSI6ICIyMDA5LTA4LTE4IiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiSW5jcmVkaWJsZSBzdG9yaWVzIG9mIHN0cnVnZ2xlLCByZWRlbXB0aW9uLCBhbmQgdGhlIHBvd2VyIG9mIGVkdWNhdGlvbiBmcm9tIHRoZSB0ZWFjaGVycyB0YXVnaHQgYnkgRXJpbiBHcnV3ZWxsIGFuZCB0aGUgIzEgTmV3IFlvcmsgVGltZXMgYmVzdHNlbGxpbmcgYXV0aG9ycyBvZiBUaGUgRnJlZWRvbSBXcml0ZXJzIERpYXJ5IERvbuKAmXQgbWlzcyB0aGUgcHVibGljIHRlbGV2aXNpb24gZG9jdW1lbnRhcnkgRnJlZWRvbSBXcml0ZXJzOiBTdG9yaWVzIGZyb20gdGhlIEhlYXJ0IOKAnFRoZXNlIGFyZSB0aGUgbW9zdCBpbmZsdWVudGlhbCBwcm9mZXNzaW9uYWxzIG1vc3Qgb2YgdXMgd2lsbCBldmVyIG1lZXQuIFRoZSBlZmZlY3RzIG9mIHRoZWlyIHdvcmsgd2lsbCBsYXN0IGZvcmV2ZXIu4oCd4oCURnJvbSB0aGUgZm9yZXdvcmQgYnkgQW5uYSBRdWluZGxlbiBOb3cgZG9jdW1lbnRlZCBpbiBhIGJlc3RzZWxsaW5nIGJvb2ssIGZlYXR1cmUgZmlsbSwgYW5kIHB1YmxpYyB0ZWxldmlzaW9uIGRvY3VtZW50YXJ5LCB0aGUgRnJlZWRvbSBXcml0ZXJzIHBoZW5vbWVub24gY2FtZSBhYm91dCBpbiAxOTk0LCB3aGVuIEVyaW4gR3J1d2VsbCBzdGVwcGVkIGludG8gUm9vbSAyMDMgYW5kIGJlZ2FuIGhlciBmaXJzdCB0ZWFjaGluZyBqb2Igb3V0IG9mIGNvbGxlZ2UuIExvbmcgQmVhY2gsIENhbGlmb3JuaWEsIHdhcyBzdGlsbCByZWVsaW5nIGZyb20gdGhlIGRlYWRseSB2aW9sZW5jZSB0aGF0IGVydXB0ZWQgZHVyaW5nIHRoZSBSb2RuZXkgS2luZyByaW90cywgYW5kIHRoZSBraWRzIGluIEVyaW7igJlzIGNsYXNzcm9vbSByZWZsZWN0ZWQgdGhlIGFuZ2VyLCByZXNlbnRtZW50LCBhbmQgaG9wZWxlc3NuZXNzIG9mIHRoZWlyIGNvbW11bml0eS4gVW5kYXVudGVkLCBFcmluIGZvc3RlcmVkIGFuIGVkdWNhdGlvbmFsIHBoaWxvc29waHkgdGhhdCB2YWx1ZWQgYW5kIHByb21vdGVkIGRpdmVyc2l0eSwgdG9sZXJhbmNlLCBhbmQgY29tbXVuaWNhdGlvbiwgYW5kIGluIHRoZSBwcm9jZXNzLCBzaGUgdHJhbnNmb3JtZWQgaGVyIHN0dWRlbnRz4oCZIGxpdmVzLCBhcyB3ZWxsIGFzIGhlciBvd24uIEVyaW4gR3J1d2VsbCBhbmQgdGhlIEZyZWVkb20gV3JpdGVycyB3ZW50IG9uIHRvIGVzdGFibGlzaCB0aGUgRnJlZWRvbSBXcml0ZXJzIEZvdW5kYXRpb24gdG8gcmVwbGljYXRlIHRoZSBzdWNjZXNzIG9mIFJvb20gMjAzIGFuZCBwcm92aWRlIGFsbCBzdHVkZW50cyB3aXRoIGhvcGUgYW5kIG9wcG9ydHVuaXRpZXMgdG8gcmVhbGl6ZSB0aGVpciBhY2FkZW1pYyBwb3RlbnRpYWwuIFNpbmNlIHRoZW4sIHRoZSBmb3VuZGF0aW9uIGhhcyB0cmFpbmVkIG1vcmUgdGhhbiA4MDAgdGVhY2hlcnMgYXJvdW5kIHRoZSB3b3JsZC4gVGVhY2hpbmcgSG9wZSB1bml0ZXMgdGhlIHZvaWNlcyBvZiB0aGVzZSBGcmVlZG9tIFdyaXRlciBUZWFjaGVycywgd2hvIHNoYXJlIHVwbGlmdGluZywgZGV2YXN0YXRpbmcsIGFuZCBwb2lnbmFudCBzdG9yaWVzIGZyb20gdGhlaXIgY2xhc3Nyb29tcywgc3RvcmllcyB0aGF0IHByb3ZpZGUgaW5zaWdodCBpbnRvIHRoZSBzdHJ1Z2dsZXMgYW5kIHRyaXVtcGhzIG9mIGVkdWNhdGlvbiBpbiBhbGwgb2YgaXRzIGZvcm1zLiBNaXJyb3JpbmcgYW4gYWNhZGVtaWMgeWVhciwgdGhlc2UgZGlzcGF0Y2hlcyBmcm9tIHRoZSBmcm9udCBsaW5lcyBvZiBlZHVjYXRpb24gdGFrZSB1cyBmcm9tIHRoZSBhbnRpY2lwYXRpb24gb2YgdGhlIGZpcnN0IGRheSB0byB0aGUgZGlzaWxsdXNpb25tZW50LCBjaGFsbGVuZ2VzLCBhbmQgdHJpdW1waHMgb2YgdGhlIHNjaG9vbCB5ZWFyLiBUaGVzZSBhcmUgdGhlIHZvaWNlcyBvZiB0ZWFjaGVycyB3aG8gcGVyc2V2ZXJlIGluIHRoZSBmYWNlIG9mIGludG9sZXJhbmNlLCByaWdpZCBhZG1pbmlzdHJhdGlvbiwgYW5kIGNvdW50bGVzcyBvdGhlciBjaGFsbGVuZ2VzLCBhbmQgY29udGludWUgdG8gcmVhY2ggb3V0IGFuZCB0ZWFjaCB0aG9zZSB3aG8gYXJlIGRlZW1lZCB1bnRlYWNoYWJsZS4gVGhlaXIgc3RvcmllcyBpbnNwaXJlIGV2ZXJ5b25lIHRvIG1ha2UgYSBkaWZmZXJlbmNlIGluIHRoZSB3b3JsZCBhcm91bmQgdGhlbS4iLAogICAgICAgICJpbmR1c3RyeUlkZW50aWZpZXJzIjogWwogICAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJJU0JOXzEzIiwKICAgICAgICAgICAgImlkZW50aWZpZXIiOiAiOTc4MDc2NzkzMTcyNCIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogIklTQk5fMTAiLAogICAgICAgICAgICAiaWRlbnRpZmllciI6ICIwNzY3OTMxNzI2IgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInJlYWRpbmdNb2RlcyI6IHsKICAgICAgICAgICJ0ZXh0IjogZmFsc2UsCiAgICAgICAgICAiaW1hZ2UiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgInBhZ2VDb3VudCI6IDM4NSwKICAgICAgICAicHJpbnRUeXBlIjogIkJPT0siLAogICAgICAgICJjYXRlZ29yaWVzIjogWwogICAgICAgICAgIkVkdWNhdGlvbiIKICAgICAgICBdLAogICAgICAgICJtYXR1cml0eVJhdGluZyI6ICJOT1RfTUFUVVJFIiwKICAgICAgICAiYWxsb3dBbm9uTG9nZ2luZyI6IGZhbHNlLAogICAgICAgICJjb250ZW50VmVyc2lvbiI6ICIwLjIuMC4wLnByZXZpZXcuMCIsCiAgICAgICAgInBhbmVsaXphdGlvblN1bW1hcnkiOiB7CiAgICAgICAgICAiY29udGFpbnNFcHViQnViYmxlcyI6IGZhbHNlLAogICAgICAgICAgImNvbnRhaW5zSW1hZ2VCdWJibGVzIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJpbWFnZUxpbmtzIjogewogICAgICAgICAgInNtYWxsVGh1bWJuYWlsIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2NvbnRlbnQ/aWQ9V18xdkR3QUFRQkFKJnByaW50c2VjPWZyb250Y292ZXImaW1nPTEmem9vbT01JmVkZ2U9Y3VybCZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgICAidGh1bWJuYWlsIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2NvbnRlbnQ/aWQ9V18xdkR3QUFRQkFKJnByaW50c2VjPWZyb250Y292ZXImaW1nPTEmem9vbT0xJmVkZ2U9Y3VybCZzb3VyY2U9Z2JzX2FwaSIKICAgICAgICB9LAogICAgICAgICJsYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgInByZXZpZXdMaW5rIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzP2lkPVdfMXZEd0FBUUJBSiZwcmludHNlYz1mcm9udGNvdmVyJmRxPWZyZWVkb20rd3JpdGVycyZobD0mY2Q9NSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImluZm9MaW5rIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzP2lkPVdfMXZEd0FBUUJBSiZkcT1mcmVlZG9tK3dyaXRlcnMmaGw9JnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAiY2Fub25pY2FsVm9sdW1lTGluayI6ICJodHRwczovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvYWJvdXQvVGVhY2hpbmdfSG9wZS5odG1sP2hsPSZpZD1XXzF2RHdBQVFCQUoiCiAgICAgIH0sCiAgICAgICJzYWxlSW5mbyI6IHsKICAgICAgICAiY291bnRyeSI6ICJVUyIsCiAgICAgICAgInNhbGVhYmlsaXR5IjogIk5PVF9GT1JfU0FMRSIsCiAgICAgICAgImlzRWJvb2siOiBmYWxzZQogICAgICB9LAogICAgICAiYWNjZXNzSW5mbyI6IHsKICAgICAgICAiY291bnRyeSI6ICJVUyIsCiAgICAgICAgInZpZXdhYmlsaXR5IjogIlBBUlRJQUwiLAogICAgICAgICJlbWJlZGRhYmxlIjogdHJ1ZSwKICAgICAgICAicHVibGljRG9tYWluIjogZmFsc2UsCiAgICAgICAgInRleHRUb1NwZWVjaFBlcm1pc3Npb24iOiAiQUxMT1dFRCIsCiAgICAgICAgImVwdWIiOiB7CiAgICAgICAgICAiaXNBdmFpbGFibGUiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgInBkZiI6IHsKICAgICAgICAgICJpc0F2YWlsYWJsZSI6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICAid2ViUmVhZGVyTGluayI6ICJodHRwOi8vcGxheS5nb29nbGUuY29tL2Jvb2tzL3JlYWRlcj9pZD1XXzF2RHdBQVFCQUomaGw9JnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAiYWNjZXNzVmlld1N0YXR1cyI6ICJTQU1QTEUiLAogICAgICAgICJxdW90ZVNoYXJpbmdBbGxvd2VkIjogZmFsc2UKICAgICAgfSwKICAgICAgInNlYXJjaEluZm8iOiB7CiAgICAgICAgInRleHRTbmlwcGV0IjogIlRoZXNlIGFyZSB0aGUgdm9pY2VzIG9mIHRlYWNoZXJzIHdobyBwZXJzZXZlcmUgaW4gdGhlIGZhY2Ugb2YgaW50b2xlcmFuY2UsIHJpZ2lkIGFkbWluaXN0cmF0aW9uLCBhbmQgY291bnRsZXNzIG90aGVyIGNoYWxsZW5nZXMsIGFuZCBjb250aW51ZSB0byByZWFjaCBvdXQgYW5kIHRlYWNoIHRob3NlIHdobyBhcmUgZGVlbWVkIHVudGVhY2hhYmxlLiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAiYm9va3Mjdm9sdW1lIiwKICAgICAgImlkIjogImtfalNPYTM2cEhZQyIsCiAgICAgICJldGFnIjogIjI1N0NTMm1oM2pjIiwKICAgICAgInNlbGZMaW5rIjogImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2Jvb2tzL3YxL3ZvbHVtZXMva19qU09hMzZwSFlDIiwKICAgICAgInZvbHVtZUluZm8iOiB7CiAgICAgICAgInRpdGxlIjogIlRlYWNoIHdpdGggWW91ciBIZWFydCIsCiAgICAgICAgInN1YnRpdGxlIjogIkxlc3NvbnMgSSBMZWFybmVkIGZyb20gdGhlIEZyZWVkb20gV3JpdGVycyIsCiAgICAgICAgImF1dGhvcnMiOiBbCiAgICAgICAgICAiRXJpbiBHcnV3ZWxsIgogICAgICAgIF0sCiAgICAgICAgInB1Ymxpc2hlciI6ICJDcm93biIsCiAgICAgICAgInB1Ymxpc2hlZERhdGUiOiAiMjAwNy0wMS0wOSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBleHRyYW9yZGluYXJ5IG1lbW9pciBvZiB0aGUgIzEgTmV3IFlvcmsgVGltZXMgYmVzdHNlbGxpbmcgYXV0aG9yIG9mIFRoZSBGcmVlZG9tIFdyaXRlcnMgRGlhcnksIHdob+KAmXMgYmVlbiBoYWlsZWQgYXMg4oCcYSB0cnVlIGluc3BpcmF0aW9u4oCdIChIaWxhcnkgU3dhbmspIGFuZCDigJxzaW1wbHkgbWFnaWNhbCB3aGVuIGl0IGNvbWVzIHRvIGluc3BpcmluZyBwZW9wbGUgdG8gYWN0aW9u4oCdIChMb3MgQW5nZWxlcyBUaW1lcykuIERvbuKAmXQgbWlzcyB0aGUgcHVibGljIHRlbGV2aXNpb24gZG9jdW1lbnRhcnkgRnJlZWRvbSBXcml0ZXJzOiBTdG9yaWVzIGZyb20gdGhlIEhlYXJ0IEluIHRoaXMgcGFzc2lvbmF0ZSwgcG9pZ25hbnQsIGFuZCBkZWVwbHkgcGVyc29uYWwgbWVtb2lyIGFuZCBjYWxsIHRvIGFybXMsIEVyaW4gR3J1d2VsbCwgdGhlIGR5bmFtaWMgdGVhY2hlciB3aG8gbnVydHVyZWQgYW4gZXh0cmFvcmRpbmFyeSBncm91cCBvZiBoaWdoIHNjaG9vbCBzdHVkZW50cyBmcm9tIExvbmcgQmVhY2gsIENhbGlmb3JuaWEsIHdobyBjYWxsZWQgdGhlbXNlbHZlcyB0aGUgRnJlZWRvbSBXcml0ZXJzLCBwaWNrcyB1cCB3aGVyZSBUaGUgRnJlZWRvbSBXcml0ZXJzIERpYXJ54oCUYW5kIHRoZSBoaXQgbW92aWUgRnJlZWRvbSBXcml0ZXJz4oCUbGVmdCBvZmYgYW5kIGJyaW5ncyB0aGUgcmVhZGVyIHVwIHRvIGRhdGUgb24gd2hlcmUgdGhlIEZyZWVkb20gV3JpdGVycyBhcmUgdG9kYXkuIEluY2x1ZGluZyB0aGVpciB1bmZvcmdldHRhYmxlIHRyaXAgdG8gQXVzY2h3aXR6LCB3aGVyZSB0aGV5IG1ldCB3aXRoIEhvbG9jYXVzdCBzdXJ2aXZvcnM7IHRoZWlyIHRvdXIgb2YgdGhlIGF0dGljIG9mIHRoZWlyIGJlbG92ZWQgQW5uZSBGcmFuazsgYW5kIHRoZWlyIHZpc2l0IHRvIEJvc25pYSB3aXRoIHRoZWlyIGZyaWVuZCBabGF0YSBGaWxpcG92acSHLCBUZWFjaCBXaXRoIFlvdXIgSGVhcnQgY2hyb25pY2xlcyB3aGF0IGhhcHBlbmVkIHdpdGggdGhlIEZyZWVkb20gV3JpdGVycyBhcyB0aGV5IG1hZGUgdGhlaXIgd2F5IHRocm91Z2ggY29sbGVnZSBhbmQgYmV5b25kLiBBbG9uZyB0aGUgd2F5LCBHcnV3ZWxsIGluY2x1ZGVzIGxlc3NvbnMgZm9yIHBhcmVudHMgYW5kIHRlYWNoZXJzIGFib3V0IHdoYXQgc2hlIGxlYXJuZWQgZnJvbSBoZXIgcmVtYXJrYWJsZSBiYW5kIG9mIHN0dWRlbnRzIGFzIHNoZSB0cmF2ZWxlZCB0aHJvdWdoIHRoZSBlbW90aW9uYWwgcGVha3MgYW5kIHZhbGxleXMgb24gdGhlIGZyb250IGxpbmVzIG9mIG91ciBuYXRpb27igJlzIGVkdWNhdGlvbmFsIHN5c3RlbS4gQSBtZXNtZXJpemluZyBzdG9yeSBvZiBvbmUgeW91bmcgd29tYW7igJlzIHBlcnNvbmFsIG9keXNzZXkgYW5kIG9mIGhlciB1bmlxdWUgYWJpbGl0eSB0byBlbmNvdXJhZ2Ugb3RoZXJzIHRvIGZvbGxvdyBpbiBoZXIgZm9vdHN0ZXBzLCBUZWFjaCBXaXRoIFlvdXIgSGVhcnQgaXMgbWFya2VkIGJ5IHRoZSBlbnZpYWJsZSByYWRpYW5jZSBhbmQgaXJyZXByZXNzaWJsZSBmb3JjZSBvZiBuYXR1cmUgdGhhdCBhcmUgRXJpbiBHcnV3ZWxsIGFuZCBoZXIgdW5iZWxpZXZhYmxlIGRldGVybWluYXRpb24gdG8gZW5zdXJlIHRoYXQgZWR1Y2F0aW9uIGluIHRoZSBVbml0ZWQgU3RhdGVzIHRydWx5IG1lZXRzIHRoZSBuZWVkcyBvZiBldmVyeSBzdHVkZW50LiIsCiAgICAgICAgImluZHVzdHJ5SWRlbnRpZmllcnMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogIklTQk5fMTMiLAogICAgICAgICAgICAiaWRlbnRpZmllciI6ICI5NzgwNzY3OTI3Mzc2IgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAiSVNCTl8xMCIsCiAgICAgICAgICAgICJpZGVudGlmaWVyIjogIjA3Njc5MjczNzAiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicmVhZGluZ01vZGVzIjogewogICAgICAgICAgInRleHQiOiB0cnVlLAogICAgICAgICAgImltYWdlIjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgInBhZ2VDb3VudCI6IDI3NCwKICAgICAgICAicHJpbnRUeXBlIjogIkJPT0siLAogICAgICAgICJjYXRlZ29yaWVzIjogWwogICAgICAgICAgIkJpb2dyYXBoeSAmIEF1dG9iaW9ncmFwaHkiCiAgICAgICAgXSwKICAgICAgICAibWF0dXJpdHlSYXRpbmciOiAiTk9UX01BVFVSRSIsCiAgICAgICAgImFsbG93QW5vbkxvZ2dpbmciOiB0cnVlLAogICAgICAgICJjb250ZW50VmVyc2lvbiI6ICIxLjYuNC4wLnByZXZpZXcuMyIsCiAgICAgICAgInBhbmVsaXphdGlvblN1bW1hcnkiOiB7CiAgICAgICAgICAiY29udGFpbnNFcHViQnViYmxlcyI6IGZhbHNlLAogICAgICAgICAgImNvbnRhaW5zSW1hZ2VCdWJibGVzIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJpbWFnZUxpbmtzIjogewogICAgICAgICAgInNtYWxsVGh1bWJuYWlsIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2NvbnRlbnQ/aWQ9a19qU09hMzZwSFlDJnByaW50c2VjPWZyb250Y292ZXImaW1nPTEmem9vbT01JmVkZ2U9Y3VybCZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgICAidGh1bWJuYWlsIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2NvbnRlbnQ/aWQ9a19qU09hMzZwSFlDJnByaW50c2VjPWZyb250Y292ZXImaW1nPTEmem9vbT0xJmVkZ2U9Y3VybCZzb3VyY2U9Z2JzX2FwaSIKICAgICAgICB9LAogICAgICAgICJsYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgInByZXZpZXdMaW5rIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzP2lkPWtfalNPYTM2cEhZQyZwcmludHNlYz1mcm9udGNvdmVyJmRxPWZyZWVkb20rd3JpdGVycyZobD0mY2Q9NiZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImluZm9MaW5rIjogImh0dHBzOi8vcGxheS5nb29nbGUuY29tL3N0b3JlL2Jvb2tzL2RldGFpbHM/aWQ9a19qU09hMzZwSFlDJnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAiY2Fub25pY2FsVm9sdW1lTGluayI6ICJodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9ib29rcy9kZXRhaWxzP2lkPWtfalNPYTM2cEhZQyIKICAgICAgfSwKICAgICAgInNhbGVJbmZvIjogewogICAgICAgICJjb3VudHJ5IjogIlVTIiwKICAgICAgICAic2FsZWFiaWxpdHkiOiAiRk9SX1NBTEUiLAogICAgICAgICJpc0Vib29rIjogdHJ1ZSwKICAgICAgICAibGlzdFByaWNlIjogewogICAgICAgICAgImFtb3VudCI6IDEwLjk5LAogICAgICAgICAgImN1cnJlbmN5Q29kZSI6ICJVU0QiCiAgICAgICAgfSwKICAgICAgICAicmV0YWlsUHJpY2UiOiB7CiAgICAgICAgICAiYW1vdW50IjogMTAuOTksCiAgICAgICAgICAiY3VycmVuY3lDb2RlIjogIlVTRCIKICAgICAgICB9LAogICAgICAgICJidXlMaW5rIjogImh0dHBzOi8vcGxheS5nb29nbGUuY29tL3N0b3JlL2Jvb2tzL2RldGFpbHM/aWQ9a19qU09hMzZwSFlDJnJkaWQ9Ym9vay1rX2pTT2EzNnBIWUMmcmRvdD0xJnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAib2ZmZXJzIjogWwogICAgICAgICAgewogICAgICAgICAgICAiZmluc2t5T2ZmZXJUeXBlIjogMSwKICAgICAgICAgICAgImxpc3RQcmljZSI6IHsKICAgICAgICAgICAgICAiYW1vdW50SW5NaWNyb3MiOiAxMDk5MDAwMCwKICAgICAgICAgICAgICAiY3VycmVuY3lDb2RlIjogIlVTRCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInJldGFpbFByaWNlIjogewogICAgICAgICAgICAgICJhbW91bnRJbk1pY3JvcyI6IDEwOTkwMDAwLAogICAgICAgICAgICAgICJjdXJyZW5jeUNvZGUiOiAiVVNEIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ2lmdGFibGUiOiB0cnVlCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAiYWNjZXNzSW5mbyI6IHsKICAgICAgICAiY291bnRyeSI6ICJVUyIsCiAgICAgICAgInZpZXdhYmlsaXR5IjogIlBBUlRJQUwiLAogICAgICAgICJlbWJlZGRhYmxlIjogdHJ1ZSwKICAgICAgICAicHVibGljRG9tYWluIjogZmFsc2UsCiAgICAgICAgInRleHRUb1NwZWVjaFBlcm1pc3Npb24iOiAiQUxMT1dFRCIsCiAgICAgICAgImVwdWIiOiB7CiAgICAgICAgICAiaXNBdmFpbGFibGUiOiB0cnVlLAogICAgICAgICAgImFjc1Rva2VuTGluayI6ICJodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcy9kb3dubG9hZC9UZWFjaF93aXRoX1lvdXJfSGVhcnQtc2FtcGxlLWVwdWIuYWNzbT9pZD1rX2pTT2EzNnBIWUMmZm9ybWF0PWVwdWImb3V0cHV0PWFjczRfZnVsZmlsbG1lbnRfdG9rZW4mZGxfdHlwZT1zYW1wbGUmc291cmNlPWdic19hcGkiCiAgICAgICAgfSwKICAgICAgICAicGRmIjogewogICAgICAgICAgImlzQXZhaWxhYmxlIjogdHJ1ZSwKICAgICAgICAgICJhY3NUb2tlbkxpbmsiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvZG93bmxvYWQvVGVhY2hfd2l0aF9Zb3VyX0hlYXJ0LXNhbXBsZS1wZGYuYWNzbT9pZD1rX2pTT2EzNnBIWUMmZm9ybWF0PXBkZiZvdXRwdXQ9YWNzNF9mdWxmaWxsbWVudF90b2tlbiZkbF90eXBlPXNhbXBsZSZzb3VyY2U9Z2JzX2FwaSIKICAgICAgICB9LAogICAgICAgICJ3ZWJSZWFkZXJMaW5rIjogImh0dHA6Ly9wbGF5Lmdvb2dsZS5jb20vYm9va3MvcmVhZGVyP2lkPWtfalNPYTM2cEhZQyZobD0mc291cmNlPWdic19hcGkiLAogICAgICAgICJhY2Nlc3NWaWV3U3RhdHVzIjogIlNBTVBMRSIsCiAgICAgICAgInF1b3RlU2hhcmluZ0FsbG93ZWQiOiBmYWxzZQogICAgICB9LAogICAgICAic2VhcmNoSW5mbyI6IHsKICAgICAgICAidGV4dFNuaXBwZXQiOiAiQSBtZXNtZXJpemluZyBzdG9yeSBvZiBvbmUgeW91bmcgd29tYW7igJlzIHBlcnNvbmFsIG9keXNzZXkgYW5kIG9mIGhlciB1bmlxdWUgYWJpbGl0eSB0byBlbmNvdXJhZ2Ugb3RoZXJzIHRvIGZvbGxvdyBpbiBoZXIgZm9vdHN0ZXBzLCBUZWFjaCBXaXRoIFlvdXIgSGVhcnQgaXMgbWFya2VkIGJ5IHRoZSBlbnZpYWJsZSByYWRpYW5jZSBhbmQgaXJyZXByZXNzaWJsZSBmb3JjZSBvZiBuYXR1cmUgdGhhdCBhcmUgRXJpbiAuLi4iCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogImJvb2tzI3ZvbHVtZSIsCiAgICAgICJpZCI6ICJzY1hLWXF0dHBtWUMiLAogICAgICAiZXRhZyI6ICJxeVZuSnZDQUN5SSIsCiAgICAgICJzZWxmTGluayI6ICJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9ib29rcy92MS92b2x1bWVzL3NjWEtZcXR0cG1ZQyIsCiAgICAgICJ2b2x1bWVJbmZvIjogewogICAgICAgICJ0aXRsZSI6ICJUaGUgRnJlZWRvbSBXcml0ZXJzIERpYXJ5IFRlYWNoZXIncyBHdWlkZSIsCiAgICAgICAgImF1dGhvcnMiOiBbCiAgICAgICAgICAiRXJpbiBHcnV3ZWxsIiwKICAgICAgICAgICJUaGUgRnJlZWRvbSBXcml0ZXJzIgogICAgICAgIF0sCiAgICAgICAgInB1Ymxpc2hlciI6ICJDcm93biIsCiAgICAgICAgInB1Ymxpc2hlZERhdGUiOiAiMjAwOC0wOS0xNiIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkEgc3RhbmRhcmRzLWJhc2VkIHRlYWNoZXLigJlzIGd1aWRlIGZyb20gdGhlIGVkdWNhdG9yIGJlaGluZCB0aGUgIzEgTmV3IFlvcmsgVGltZXMgYmVzdHNlbGxlciBUaGUgRnJlZWRvbSBXcml0ZXJzIERpYXJ5LCB3aXRoIGlubm92YXRpdmUgdGVhY2hpbmcgdGVjaG5pcXVlcyB0aGF0IHdpbGwgZW5nYWdlLCBlbXBvd2VyLCBhbmQgZW5saWdodGVuLiBEb27igJl0IG1pc3MgdGhlIHB1YmxpYyB0ZWxldmlzaW9uIGRvY3VtZW50YXJ5IEZyZWVkb20gV3JpdGVyczogU3RvcmllcyBmcm9tIHRoZSBIZWFydCBJbiByZXNwb25zZSB0byB0aG91c2FuZHMgb2YgbGV0dGVycyBhbmQgZS1tYWlscyBmcm9tIHRlYWNoZXJzIGFjcm9zcyB0aGUgY291bnRyeSB3aG8gbGVhcm5lZCBhYm91dCBFcmluIEdydXdlbGwgYW5kIGhlciBhbWF6aW5nIHN0dWRlbnRzIGluIFRoZSBGcmVlZG9tIFdyaXRlcnMgRGlhcnkgYW5kIHRoZSBoaXQgbW92aWUgRnJlZWRvbSBXcml0ZXJzLCBHcnV3ZWxsIGFuZCBhIHRlYW0gb2YgdGVhY2hlciBleHBlcnRzIGhhdmUgd3JpdHRlbiBUaGUgRnJlZWRvbSBXcml0ZXJzIERpYXJ5IFRlYWNoZXLigJlzIEd1aWRlLCBhIGJvb2sgdGhhdCB3aWxsIGVuY291cmFnZSB0ZWFjaGVycyBhbmQgc3R1ZGVudHMgdG8gZXhwYW5kIHRoZSB3YWxscyBvZiB0aGVpciBjbGFzc3Jvb21zIGFuZCB0aGluayBvdXRzaWRlIHRoZSBib3guIEhlcmUgR3J1d2VsbCBnb2VzIGluIGRlcHRoIGFuZCBzaGFyZXMgaGVyIHVuY29udmVudGlvbmFsIGJ1dCBoaWdobHkgc3VjY2Vzc2Z1bCBlZHVjYXRpb25hbCBzdHJhdGVnaWVzIGFuZCB0ZWNobmlxdWVzIChhbGwgMTUwIG9mIGhlciBzdHVkZW50cywgd2hvIGhhZCBiZWVuIGRlZW1lZCDigJx1bnRlYWNoYWJsZSzigJ0gZ3JhZHVhdGVkIGZyb20gV2lsc29uIEhpZ2ggU2Nob29sIGluIExvbmcgQmVhY2gsIENhbGlmb3JuaWEpOiBmcm9tIGhlciB2ZXJ5IHN1Y2Nlc3NmdWwg4oCcdG9hc3QgZm9yIGNoYW5nZeKAnSAoYW4gZXhlcmNpc2UgaW4gd2hpY2ggR3J1d2VsbCBleGhvcnRlZCBoZXIgc3R1ZGVudHMgdG8gbGVhdmUgdGhlIHBhc3QgYmVoaW5kIGFuZCBzdGFydCBmcmVzaCkgdG8gd3JpdGluZyBleGVyY2lzZXMgdGhhdCBmb2N1cyBvbiB0aGUgaW1wb3J0YW5jZSBvZiBqb3VybmFsIHdyaXRpbmcsIHZvY2FidWxhcnksIGFuZCBtb3JlLiBJbiBhbiBlYXN5LXRvLXVzZSBmb3JtYXQgd2l0aCBibGFjay1hbmQtd2hpdGUgaWxsdXN0cmF0aW9ucywgdGhpcyB0ZWFjaGVy4oCZcyBndWlkZSB3aWxsIGJlY29tZSB0aGUgZXNzZW50aWFsIGdvLXRvIG1hbnVhbCBmb3IgdGVhY2hlcnMgd2hvIHdhbnQgdG8gbWFrZSBhIGRpZmZlcmVuY2UgaW4gdGhlaXIgcHVwaWxz4oCZIGxpdmVzLiIsCiAgICAgICAgImluZHVzdHJ5SWRlbnRpZmllcnMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogIklTQk5fMTMiLAogICAgICAgICAgICAiaWRlbnRpZmllciI6ICI5NzgwNzY3OTMyMTk2IgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAiSVNCTl8xMCIsCiAgICAgICAgICAgICJpZGVudGlmaWVyIjogIjA3Njc5MzIxOTYiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicmVhZGluZ01vZGVzIjogewogICAgICAgICAgInRleHQiOiB0cnVlLAogICAgICAgICAgImltYWdlIjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgInBhZ2VDb3VudCI6IDI1OCwKICAgICAgICAicHJpbnRUeXBlIjogIkJPT0siLAogICAgICAgICJjYXRlZ29yaWVzIjogWwogICAgICAgICAgIkVkdWNhdGlvbiIKICAgICAgICBdLAogICAgICAgICJhdmVyYWdlUmF0aW5nIjogNCwKICAgICAgICAicmF0aW5nc0NvdW50IjogNywKICAgICAgICAibWF0dXJpdHlSYXRpbmciOiAiTk9UX01BVFVSRSIsCiAgICAgICAgImFsbG93QW5vbkxvZ2dpbmciOiB0cnVlLAogICAgICAgICJjb250ZW50VmVyc2lvbiI6ICIwLjcuNS4wLnByZXZpZXcuMyIsCiAgICAgICAgInBhbmVsaXphdGlvblN1bW1hcnkiOiB7CiAgICAgICAgICAiY29udGFpbnNFcHViQnViYmxlcyI6IGZhbHNlLAogICAgICAgICAgImNvbnRhaW5zSW1hZ2VCdWJibGVzIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJpbWFnZUxpbmtzIjogewogICAgICAgICAgInNtYWxsVGh1bWJuYWlsIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2NvbnRlbnQ/aWQ9c2NYS1lxdHRwbVlDJnByaW50c2VjPWZyb250Y292ZXImaW1nPTEmem9vbT01JmVkZ2U9Y3VybCZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgICAidGh1bWJuYWlsIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2NvbnRlbnQ/aWQ9c2NYS1lxdHRwbVlDJnByaW50c2VjPWZyb250Y292ZXImaW1nPTEmem9vbT0xJmVkZ2U9Y3VybCZzb3VyY2U9Z2JzX2FwaSIKICAgICAgICB9LAogICAgICAgICJsYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgInByZXZpZXdMaW5rIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzP2lkPXNjWEtZcXR0cG1ZQyZwcmludHNlYz1mcm9udGNvdmVyJmRxPWZyZWVkb20rd3JpdGVycyZobD0mY2Q9NyZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImluZm9MaW5rIjogImh0dHBzOi8vcGxheS5nb29nbGUuY29tL3N0b3JlL2Jvb2tzL2RldGFpbHM/aWQ9c2NYS1lxdHRwbVlDJnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAiY2Fub25pY2FsVm9sdW1lTGluayI6ICJodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9ib29rcy9kZXRhaWxzP2lkPXNjWEtZcXR0cG1ZQyIKICAgICAgfSwKICAgICAgInNhbGVJbmZvIjogewogICAgICAgICJjb3VudHJ5IjogIlVTIiwKICAgICAgICAic2FsZWFiaWxpdHkiOiAiRk9SX1NBTEUiLAogICAgICAgICJpc0Vib29rIjogdHJ1ZSwKICAgICAgICAibGlzdFByaWNlIjogewogICAgICAgICAgImFtb3VudCI6IDExLjk5LAogICAgICAgICAgImN1cnJlbmN5Q29kZSI6ICJVU0QiCiAgICAgICAgfSwKICAgICAgICAicmV0YWlsUHJpY2UiOiB7CiAgICAgICAgICAiYW1vdW50IjogMTEuOTksCiAgICAgICAgICAiY3VycmVuY3lDb2RlIjogIlVTRCIKICAgICAgICB9LAogICAgICAgICJidXlMaW5rIjogImh0dHBzOi8vcGxheS5nb29nbGUuY29tL3N0b3JlL2Jvb2tzL2RldGFpbHM/aWQ9c2NYS1lxdHRwbVlDJnJkaWQ9Ym9vay1zY1hLWXF0dHBtWUMmcmRvdD0xJnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAib2ZmZXJzIjogWwogICAgICAgICAgewogICAgICAgICAgICAiZmluc2t5T2ZmZXJUeXBlIjogMSwKICAgICAgICAgICAgImxpc3RQcmljZSI6IHsKICAgICAgICAgICAgICAiYW1vdW50SW5NaWNyb3MiOiAxMTk5MDAwMCwKICAgICAgICAgICAgICAiY3VycmVuY3lDb2RlIjogIlVTRCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInJldGFpbFByaWNlIjogewogICAgICAgICAgICAgICJhbW91bnRJbk1pY3JvcyI6IDExOTkwMDAwLAogICAgICAgICAgICAgICJjdXJyZW5jeUNvZGUiOiAiVVNEIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ2lmdGFibGUiOiB0cnVlCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAiYWNjZXNzSW5mbyI6IHsKICAgICAgICAiY291bnRyeSI6ICJVUyIsCiAgICAgICAgInZpZXdhYmlsaXR5IjogIlBBUlRJQUwiLAogICAgICAgICJlbWJlZGRhYmxlIjogdHJ1ZSwKICAgICAgICAicHVibGljRG9tYWluIjogZmFsc2UsCiAgICAgICAgInRleHRUb1NwZWVjaFBlcm1pc3Npb24iOiAiQUxMT1dFRCIsCiAgICAgICAgImVwdWIiOiB7CiAgICAgICAgICAiaXNBdmFpbGFibGUiOiB0cnVlLAogICAgICAgICAgImFjc1Rva2VuTGluayI6ICJodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcy9kb3dubG9hZC9UaGVfRnJlZWRvbV9Xcml0ZXJzX0RpYXJ5X1RlYWNoZXJfc19HdWlkLXNhbXBsZS1lcHViLmFjc20/aWQ9c2NYS1lxdHRwbVlDJmZvcm1hdD1lcHViJm91dHB1dD1hY3M0X2Z1bGZpbGxtZW50X3Rva2VuJmRsX3R5cGU9c2FtcGxlJnNvdXJjZT1nYnNfYXBpIgogICAgICAgIH0sCiAgICAgICAgInBkZiI6IHsKICAgICAgICAgICJpc0F2YWlsYWJsZSI6IHRydWUsCiAgICAgICAgICAiYWNzVG9rZW5MaW5rIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2Rvd25sb2FkL1RoZV9GcmVlZG9tX1dyaXRlcnNfRGlhcnlfVGVhY2hlcl9zX0d1aWQtc2FtcGxlLXBkZi5hY3NtP2lkPXNjWEtZcXR0cG1ZQyZmb3JtYXQ9cGRmJm91dHB1dD1hY3M0X2Z1bGZpbGxtZW50X3Rva2VuJmRsX3R5cGU9c2FtcGxlJnNvdXJjZT1nYnNfYXBpIgogICAgICAgIH0sCiAgICAgICAgIndlYlJlYWRlckxpbmsiOiAiaHR0cDovL3BsYXkuZ29vZ2xlLmNvbS9ib29rcy9yZWFkZXI/aWQ9c2NYS1lxdHRwbVlDJmhsPSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImFjY2Vzc1ZpZXdTdGF0dXMiOiAiU0FNUExFIiwKICAgICAgICAicXVvdGVTaGFyaW5nQWxsb3dlZCI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJzZWFyY2hJbmZvIjogewogICAgICAgICJ0ZXh0U25pcHBldCI6ICJJbiBhbiBlYXN5LXRvLXVzZSBmb3JtYXQgd2l0aCBibGFjay1hbmQtd2hpdGUgaWxsdXN0cmF0aW9ucywgdGhpcyB0ZWFjaGVy4oCZcyBndWlkZSB3aWxsIGJlY29tZSB0aGUgZXNzZW50aWFsIGdvLXRvIG1hbnVhbCBmb3IgdGVhY2hlcnMgd2hvIHdhbnQgdG8gbWFrZSBhIGRpZmZlcmVuY2UgaW4gdGhlaXIgcHVwaWxz4oCZIGxpdmVzLiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAiYm9va3Mjdm9sdW1lIiwKICAgICAgImlkIjogImxLYWRQd0FBQ0FBSiIsCiAgICAgICJldGFnIjogIjVaa21ic0xQdFFrIiwKICAgICAgInNlbGZMaW5rIjogImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2Jvb2tzL3YxL3ZvbHVtZXMvbEthZFB3QUFDQUFKIiwKICAgICAgInZvbHVtZUluZm8iOiB7CiAgICAgICAgInRpdGxlIjogIlpsYXRhJ3MgRGlhcnkiLAogICAgICAgICJzdWJ0aXRsZSI6ICJBIENoaWxkJ3MgTGlmZSBpbiBTYXJhamV2byIsCiAgICAgICAgImF1dGhvcnMiOiBbCiAgICAgICAgICAiWmxhdGEgRmlsaXBvdmljIgogICAgICAgIF0sCiAgICAgICAgInB1Ymxpc2hlciI6ICJQZXJmZWN0aW9uIExlYXJuaW5nIiwKICAgICAgICAicHVibGlzaGVkRGF0ZSI6ICIyMDA2LTAyLTI4IiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGNvbXBlbGxpbmcgZmlyc3RoYW5kIGFjY291bnQgb2YgdGhlIHdhciBpbiBTYXJhamV2byB0aHJvdWdoIHRoZSBleWVzIG9mIGEgeW91bmcgQ3JvYXRpYW4gZ2lybC4iLAogICAgICAgICJpbmR1c3RyeUlkZW50aWZpZXJzIjogWwogICAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJJU0JOXzEwIiwKICAgICAgICAgICAgImlkZW50aWZpZXIiOiAiMDc1Njk2ODE5NCIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogIklTQk5fMTMiLAogICAgICAgICAgICAiaWRlbnRpZmllciI6ICI5NzgwNzU2OTY4MTk5IgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInJlYWRpbmdNb2RlcyI6IHsKICAgICAgICAgICJ0ZXh0IjogZmFsc2UsCiAgICAgICAgICAiaW1hZ2UiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgInBhZ2VDb3VudCI6IDE5NywKICAgICAgICAicHJpbnRUeXBlIjogIkJPT0siLAogICAgICAgICJtYXR1cml0eVJhdGluZyI6ICJOT1RfTUFUVVJFIiwKICAgICAgICAiYWxsb3dBbm9uTG9nZ2luZyI6IGZhbHNlLAogICAgICAgICJjb250ZW50VmVyc2lvbiI6ICJwcmV2aWV3LTEuMC4wIiwKICAgICAgICAicGFuZWxpemF0aW9uU3VtbWFyeSI6IHsKICAgICAgICAgICJjb250YWluc0VwdWJCdWJibGVzIjogZmFsc2UsCiAgICAgICAgICAiY29udGFpbnNJbWFnZUJ1YmJsZXMiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgImltYWdlTGlua3MiOiB7CiAgICAgICAgICAic21hbGxUaHVtYm5haWwiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvY29udGVudD9pZD1sS2FkUHdBQUNBQUomcHJpbnRzZWM9ZnJvbnRjb3ZlciZpbWc9MSZ6b29tPTUmc291cmNlPWdic19hcGkiLAogICAgICAgICAgInRodW1ibmFpbCI6ICJodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcy9jb250ZW50P2lkPWxLYWRQd0FBQ0FBSiZwcmludHNlYz1mcm9udGNvdmVyJmltZz0xJnpvb209MSZzb3VyY2U9Z2JzX2FwaSIKICAgICAgICB9LAogICAgICAgICJsYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgInByZXZpZXdMaW5rIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzP2lkPWxLYWRQd0FBQ0FBSiZkcT1mcmVlZG9tK3dyaXRlcnMmaGw9JmNkPTgmc291cmNlPWdic19hcGkiLAogICAgICAgICJpbmZvTGluayI6ICJodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcz9pZD1sS2FkUHdBQUNBQUomZHE9ZnJlZWRvbSt3cml0ZXJzJmhsPSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImNhbm9uaWNhbFZvbHVtZUxpbmsiOiAiaHR0cHM6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2Fib3V0L1psYXRhX3NfRGlhcnkuaHRtbD9obD0maWQ9bEthZFB3QUFDQUFKIgogICAgICB9LAogICAgICAic2FsZUluZm8iOiB7CiAgICAgICAgImNvdW50cnkiOiAiVVMiLAogICAgICAgICJzYWxlYWJpbGl0eSI6ICJOT1RfRk9SX1NBTEUiLAogICAgICAgICJpc0Vib29rIjogZmFsc2UKICAgICAgfSwKICAgICAgImFjY2Vzc0luZm8iOiB7CiAgICAgICAgImNvdW50cnkiOiAiVVMiLAogICAgICAgICJ2aWV3YWJpbGl0eSI6ICJOT19QQUdFUyIsCiAgICAgICAgImVtYmVkZGFibGUiOiBmYWxzZSwKICAgICAgICAicHVibGljRG9tYWluIjogZmFsc2UsCiAgICAgICAgInRleHRUb1NwZWVjaFBlcm1pc3Npb24iOiAiQUxMT1dFRCIsCiAgICAgICAgImVwdWIiOiB7CiAgICAgICAgICAiaXNBdmFpbGFibGUiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgInBkZiI6IHsKICAgICAgICAgICJpc0F2YWlsYWJsZSI6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICAid2ViUmVhZGVyTGluayI6ICJodHRwOi8vcGxheS5nb29nbGUuY29tL2Jvb2tzL3JlYWRlcj9pZD1sS2FkUHdBQUNBQUomaGw9JnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAiYWNjZXNzVmlld1N0YXR1cyI6ICJOT05FIiwKICAgICAgICAicXVvdGVTaGFyaW5nQWxsb3dlZCI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJzZWFyY2hJbmZvIjogewogICAgICAgICJ0ZXh0U25pcHBldCI6ICJUaGUgY29tcGVsbGluZyBmaXJzdGhhbmQgYWNjb3VudCBvZiB0aGUgd2FyIGluIFNhcmFqZXZvIHRocm91Z2ggdGhlIGV5ZXMgb2YgYSB5b3VuZyBDcm9hdGlhbiBnaXJsLiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAiYm9va3Mjdm9sdW1lIiwKICAgICAgImlkIjogIl8wQTZxcXhGRndBQyIsCiAgICAgICJldGFnIjogIkdOdzVnS0xCVVlvIiwKICAgICAgInNlbGZMaW5rIjogImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2Jvb2tzL3YxL3ZvbHVtZXMvXzBBNnFxeEZGd0FDIiwKICAgICAgInZvbHVtZUluZm8iOiB7CiAgICAgICAgInRpdGxlIjogIkFsaWNlIFdhbGtlciIsCiAgICAgICAgInN1YnRpdGxlIjogIkZyZWVkb20gV3JpdGVyIiwKICAgICAgICAiYXV0aG9ycyI6IFsKICAgICAgICAgICJDYXJvbGluZSBFdmVuc2VuIExhem8iCiAgICAgICAgXSwKICAgICAgICAicHVibGlzaGVyIjogIlR3ZW50eS1GaXJzdCBDZW50dXJ5IEJvb2tzIiwKICAgICAgICAicHVibGlzaGVkRGF0ZSI6ICIyMDAwLTAxLTAxIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiRGlzY3Vzc2VzIHRoZSBwZXJzb25hbCBsaWZlIGFuZCBsaXRlcmFyeSBjYXJlZXIgb2YgdGhlIEFmcmljYW4gQW1lcmljYW4gd29tYW4gd2hvIHdvbiB0aGUgUHVsaXR6ZXIgUHJpemUgZm9yIGhlciBub3ZlbCwgXCJUaGUgQ29sb3IgUHVycGxlLlwiIiwKICAgICAgICAiaW5kdXN0cnlJZGVudGlmaWVycyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAiSVNCTl8xMCIsCiAgICAgICAgICAgICJpZGVudGlmaWVyIjogIjA4MjI1NDk2MDMiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJJU0JOXzEzIiwKICAgICAgICAgICAgImlkZW50aWZpZXIiOiAiOTc4MDgyMjU0OTYwNCIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJyZWFkaW5nTW9kZXMiOiB7CiAgICAgICAgICAidGV4dCI6IGZhbHNlLAogICAgICAgICAgImltYWdlIjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgInBhZ2VDb3VudCI6IDEyMCwKICAgICAgICAicHJpbnRUeXBlIjogIkJPT0siLAogICAgICAgICJjYXRlZ29yaWVzIjogWwogICAgICAgICAgIkp1dmVuaWxlIE5vbmZpY3Rpb24iCiAgICAgICAgXSwKICAgICAgICAiYXZlcmFnZVJhdGluZyI6IDUsCiAgICAgICAgInJhdGluZ3NDb3VudCI6IDEsCiAgICAgICAgIm1hdHVyaXR5UmF0aW5nIjogIk5PVF9NQVRVUkUiLAogICAgICAgICJhbGxvd0Fub25Mb2dnaW5nIjogZmFsc2UsCiAgICAgICAgImNvbnRlbnRWZXJzaW9uIjogIjAuOC43LjAucHJldmlldy4xIiwKICAgICAgICAicGFuZWxpemF0aW9uU3VtbWFyeSI6IHsKICAgICAgICAgICJjb250YWluc0VwdWJCdWJibGVzIjogZmFsc2UsCiAgICAgICAgICAiY29udGFpbnNJbWFnZUJ1YmJsZXMiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgImltYWdlTGlua3MiOiB7CiAgICAgICAgICAic21hbGxUaHVtYm5haWwiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvY29udGVudD9pZD1fMEE2cXF4RkZ3QUMmcHJpbnRzZWM9ZnJvbnRjb3ZlciZpbWc9MSZ6b29tPTUmZWRnZT1jdXJsJnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAgICJ0aHVtYm5haWwiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvY29udGVudD9pZD1fMEE2cXF4RkZ3QUMmcHJpbnRzZWM9ZnJvbnRjb3ZlciZpbWc9MSZ6b29tPTEmZWRnZT1jdXJsJnNvdXJjZT1nYnNfYXBpIgogICAgICAgIH0sCiAgICAgICAgImxhbmd1YWdlIjogImVuIiwKICAgICAgICAicHJldmlld0xpbmsiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3M/aWQ9XzBBNnFxeEZGd0FDJnByaW50c2VjPWZyb250Y292ZXImZHE9ZnJlZWRvbSt3cml0ZXJzJmhsPSZjZD05JnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAiaW5mb0xpbmsiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3M/aWQ9XzBBNnFxeEZGd0FDJmRxPWZyZWVkb20rd3JpdGVycyZobD0mc291cmNlPWdic19hcGkiLAogICAgICAgICJjYW5vbmljYWxWb2x1bWVMaW5rIjogImh0dHBzOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcy9hYm91dC9BbGljZV9XYWxrZXIuaHRtbD9obD0maWQ9XzBBNnFxeEZGd0FDIgogICAgICB9LAogICAgICAic2FsZUluZm8iOiB7CiAgICAgICAgImNvdW50cnkiOiAiVVMiLAogICAgICAgICJzYWxlYWJpbGl0eSI6ICJOT1RfRk9SX1NBTEUiLAogICAgICAgICJpc0Vib29rIjogZmFsc2UKICAgICAgfSwKICAgICAgImFjY2Vzc0luZm8iOiB7CiAgICAgICAgImNvdW50cnkiOiAiVVMiLAogICAgICAgICJ2aWV3YWJpbGl0eSI6ICJQQVJUSUFMIiwKICAgICAgICAiZW1iZWRkYWJsZSI6IHRydWUsCiAgICAgICAgInB1YmxpY0RvbWFpbiI6IGZhbHNlLAogICAgICAgICJ0ZXh0VG9TcGVlY2hQZXJtaXNzaW9uIjogIkFMTE9XRUQiLAogICAgICAgICJlcHViIjogewogICAgICAgICAgImlzQXZhaWxhYmxlIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJwZGYiOiB7CiAgICAgICAgICAiaXNBdmFpbGFibGUiOiB0cnVlLAogICAgICAgICAgImFjc1Rva2VuTGluayI6ICJodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcy9kb3dubG9hZC9BbGljZV9XYWxrZXItc2FtcGxlLXBkZi5hY3NtP2lkPV8wQTZxcXhGRndBQyZmb3JtYXQ9cGRmJm91dHB1dD1hY3M0X2Z1bGZpbGxtZW50X3Rva2VuJmRsX3R5cGU9c2FtcGxlJnNvdXJjZT1nYnNfYXBpIgogICAgICAgIH0sCiAgICAgICAgIndlYlJlYWRlckxpbmsiOiAiaHR0cDovL3BsYXkuZ29vZ2xlLmNvbS9ib29rcy9yZWFkZXI/aWQ9XzBBNnFxeEZGd0FDJmhsPSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImFjY2Vzc1ZpZXdTdGF0dXMiOiAiU0FNUExFIiwKICAgICAgICAicXVvdGVTaGFyaW5nQWxsb3dlZCI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJzZWFyY2hJbmZvIjogewogICAgICAgICJ0ZXh0U25pcHBldCI6ICJEaXNjdXNzZXMgdGhlIHBlcnNvbmFsIGxpZmUgYW5kIGxpdGVyYXJ5IGNhcmVlciBvZiB0aGUgQWZyaWNhbiBBbWVyaWNhbiB3b21hbiB3aG8gd29uIHRoZSBQdWxpdHplciBQcml6ZSBmb3IgaGVyIG5vdmVsLCAmcXVvdDtUaGUgQ29sb3IgUHVycGxlLiZxdW90OyIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAiYm9va3Mjdm9sdW1lIiwKICAgICAgImlkIjogInVVNlB0d0VBQ0FBSiIsCiAgICAgICJldGFnIjogIlczUUNaT3d1NnE4IiwKICAgICAgInNlbGZMaW5rIjogImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2Jvb2tzL3YxL3ZvbHVtZXMvdVU2UHR3RUFDQUFKIiwKICAgICAgInZvbHVtZUluZm8iOiB7CiAgICAgICAgInRpdGxlIjogIlRoZSBGcmVlZG9tIFdyaXRlcnMgRGlhcnkiLAogICAgICAgICJzdWJ0aXRsZSI6ICJIb3cgYSBUZWFjaGVyIGFuZCAxNTAgVGVlbnMgVXNlZCBXcml0aW5nIHRvIENoYW5nZSBUaGVtc2VsdmVzIGFuZCB0aGUgV29ybGQgQXJvdW5kIFRoZW0iLAogICAgICAgICJhdXRob3JzIjogWwogICAgICAgICAgIkZyZWVkb20gV3JpdGVycyIKICAgICAgICBdLAogICAgICAgICJwdWJsaXNoZWREYXRlIjogIjIwMDEiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJUZWxscyB0aGUgc3Rvcnkgb2YgaG93IHlvdW5nIEVuZ2xpc2ggdGVhY2hlciBFcmluIEdydXdlbGwgY29uZnJvbnRlZCB0aGUgcHJvYmxlbSBvZiByYWNpYWwgYW5kIGV0aG5pYyBpbnRvbGVyYW5jZSBpbiBoZXIgY2xhc3Nyb29tLCBhbmQgZmVhdHVyZXMgZXhjZXJwdHMgZnJvbSB0aGUgZGlhcmllcyBvZiBoZXIgc3R1ZGVudHMsIG5vdyBrbm93biBhcyBUaGUgRnJlZWRvbSBXcml0ZXJzLiIsCiAgICAgICAgImluZHVzdHJ5SWRlbnRpZmllcnMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogIk9USEVSIiwKICAgICAgICAgICAgImlkZW50aWZpZXIiOiAiT0NMQzo0ODQ4MTIzMyIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJyZWFkaW5nTW9kZXMiOiB7CiAgICAgICAgICAidGV4dCI6IGZhbHNlLAogICAgICAgICAgImltYWdlIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJwYWdlQ291bnQiOiAyODAsCiAgICAgICAgInByaW50VHlwZSI6ICJCT09LIiwKICAgICAgICAiY2F0ZWdvcmllcyI6IFsKICAgICAgICAgICJUZWVuYWdlcnMiCiAgICAgICAgXSwKICAgICAgICAibWF0dXJpdHlSYXRpbmciOiAiTk9UX01BVFVSRSIsCiAgICAgICAgImFsbG93QW5vbkxvZ2dpbmciOiBmYWxzZSwKICAgICAgICAiY29udGVudFZlcnNpb24iOiAicHJldmlldy0xLjAuMCIsCiAgICAgICAgInBhbmVsaXphdGlvblN1bW1hcnkiOiB7CiAgICAgICAgICAiY29udGFpbnNFcHViQnViYmxlcyI6IGZhbHNlLAogICAgICAgICAgImNvbnRhaW5zSW1hZ2VCdWJibGVzIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJsYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgInByZXZpZXdMaW5rIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzP2lkPXVVNlB0d0VBQ0FBSiZkcT1mcmVlZG9tK3dyaXRlcnMmaGw9JmNkPTEwJnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAiaW5mb0xpbmsiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3M/aWQ9dVU2UHR3RUFDQUFKJmRxPWZyZWVkb20rd3JpdGVycyZobD0mc291cmNlPWdic19hcGkiLAogICAgICAgICJjYW5vbmljYWxWb2x1bWVMaW5rIjogImh0dHBzOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcy9hYm91dC9UaGVfRnJlZWRvbV9Xcml0ZXJzX0RpYXJ5Lmh0bWw/aGw9JmlkPXVVNlB0d0VBQ0FBSiIKICAgICAgfSwKICAgICAgInNhbGVJbmZvIjogewogICAgICAgICJjb3VudHJ5IjogIlVTIiwKICAgICAgICAic2FsZWFiaWxpdHkiOiAiTk9UX0ZPUl9TQUxFIiwKICAgICAgICAiaXNFYm9vayI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJhY2Nlc3NJbmZvIjogewogICAgICAgICJjb3VudHJ5IjogIlVTIiwKICAgICAgICAidmlld2FiaWxpdHkiOiAiTk9fUEFHRVMiLAogICAgICAgICJlbWJlZGRhYmxlIjogZmFsc2UsCiAgICAgICAgInB1YmxpY0RvbWFpbiI6IGZhbHNlLAogICAgICAgICJ0ZXh0VG9TcGVlY2hQZXJtaXNzaW9uIjogIkFMTE9XRUQiLAogICAgICAgICJlcHViIjogewogICAgICAgICAgImlzQXZhaWxhYmxlIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJwZGYiOiB7CiAgICAgICAgICAiaXNBdmFpbGFibGUiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgIndlYlJlYWRlckxpbmsiOiAiaHR0cDovL3BsYXkuZ29vZ2xlLmNvbS9ib29rcy9yZWFkZXI/aWQ9dVU2UHR3RUFDQUFKJmhsPSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImFjY2Vzc1ZpZXdTdGF0dXMiOiAiTk9ORSIsCiAgICAgICAgInF1b3RlU2hhcmluZ0FsbG93ZWQiOiBmYWxzZQogICAgICB9LAogICAgICAic2VhcmNoSW5mbyI6IHsKICAgICAgICAidGV4dFNuaXBwZXQiOiAiVGVsbHMgdGhlIHN0b3J5IG9mIGhvdyB5b3VuZyBFbmdsaXNoIHRlYWNoZXIgRXJpbiBHcnV3ZWxsIGNvbmZyb250ZWQgdGhlIHByb2JsZW0gb2YgcmFjaWFsIGFuZCBldGhuaWMgaW50b2xlcmFuY2UgaW4gaGVyIGNsYXNzcm9vbSwgYW5kIGZlYXR1cmVzIGV4Y2VycHRzIGZyb20gdGhlIGRpYXJpZXMgb2YgaGVyIHN0dWRlbnRzLCBub3cga25vd24gYXMgVGhlIEZyZWVkb20gV3JpdGVycy4iCiAgICAgIH0KICAgIH0KICBdCn0K
  recorded_at: Fri, 12 Jul 2024 06:55:38 GMT
- request:
    method: get
    uri: https://www.googleapis.com/books/v1/volumes?key=DONT_SHARE_MY_KEY&q=verity
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.10.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Thu, 25 Jul 2024 17:20:59 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogImJvb2tzI3ZvbHVtZXMiLAogICJ0b3RhbEl0ZW1zIjogMjI5NywKICAiaXRlbXMiOiBbCiAgICB7CiAgICAgICJraW5kIjogImJvb2tzI3ZvbHVtZSIsCiAgICAgICJpZCI6ICJUSlpXRUFBQVFCQUoiLAogICAgICAiZXRhZyI6ICJqRFFqaWh6VGRpVSIsCiAgICAgICJzZWxmTGluayI6ICJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9ib29rcy92MS92b2x1bWVzL1RKWldFQUFBUUJBSiIsCiAgICAgICJ2b2x1bWVJbmZvIjogewogICAgICAgICJ0aXRsZSI6ICJWZXJpdHkiLAogICAgICAgICJhdXRob3JzIjogWwogICAgICAgICAgIkNvbGxlZW4gSG9vdmVyIgogICAgICAgIF0sCiAgICAgICAgInB1Ymxpc2hlciI6ICJUT1BTRUxMRVIiLAogICAgICAgICJwdWJsaXNoZWREYXRlIjogIjIwMjEtMDktMjciLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJNYWlzIHVtIHJvbWFuY2UgZGUgc3VjZXNzby4gVmVyaXR5IMOpIHBlcnR1cmJhZG9yLCBhcnJlcGlhbnRlIGUgaW5lc3BlcmFkby4gVW1hIGV4cGVyacOqbmNpYSBpbmVzcXVlY8OtdmVsLiBMb3dlbiBBc2hsZWlnaCDDqSB1bWEgZXNjcml0b3JhIHF1ZSBzZSBkZWJhdGUgY29tIGdyYW5kZXMgZGlmaWN1bGRhZGVzIGZpbmFuY2VpcmFzLCBhdMOpIHF1ZSBhY2VpdGEgdW1hIG9mZXJ0YSBkZSB0cmFiYWxobyBpcnJlY3Vzw6F2ZWw6IHRlcm1pbmFyIG9zIHRyw6pzIMO6bHRpbW9zIHZvbHVtZXMgZGEgc8OpcmllIGRlIHN1Y2Vzc28gZGUgVmVyaXR5IENyYXdmb3JkLCB1bWEgYXV0b3JhIGRlIHJlbm9tZSBxdWUgZmljb3UgaW5jYXBhY2l0YWRhIGRlcG9pcyBkZSB1bSB0ZXJyw612ZWwgYWNpZGVudGUuIFBhcmEgcG9kZXIgZW50cmFyIG5hIGNhYmXDp2EgZGUgVmVyaXR5IGUgZXN0dWRhciBhcyBhbm90YcOnw7VlcyBlIGlkZWlhcyByZXVuaWRhcyBhbyBsb25nbyBkZSBhbm9zIGRlIHRyYWJhbGhvLCBMb3dlbiBhY2VpdGEgbyBjb252aXRlIGRlIEplcmVteSBDcmF3Zm9yZCwgbWFyaWRvIGRhIGF1dG9yYSwgZSBtdWRhLXNlIHRlbXBvcmFyaWFtZW50ZSBwYXJhIGEgY2FzYSBkZWxlcy4gTWFzIG8gcXVlIGVsYSBuw6NvIGVzcGVyYXZhIGVuY29udHJhciBubyBjYcOzdGljbyBlc2NyaXTDs3JpbyBkZSBWZXJpdHkgZXJhIGEgYXV0b2Jpb2dyYWZpYSBpbmFjYWJhZGEgZGEgYXV0b3JhLiBBbyBsw6otbGEsIHBlcmNlYmUgcXVlIGVzdGEgbsOjbyBzZSBkZXN0aW5hdmEgYSBzZXIgcGFydGlsaGFkYSBjb20gbmluZ3XDqW0uIFPDo28gcMOhZ2luYXMgZSBww6FnaW5hcyBkZSBjb25maXNzw7VlcyBhcnJlcGlhbnRlcywgaW5jbHVpbmRvIGFzIG1lbcOzcmlhcyBkZSBWZXJpdHkgcmVsYXRpdmFzIGFvIGRpYSBkYSBtb3J0ZSBkYSBmaWxoYS4gTG93ZW4gZGVjaWRlIG9jdWx0YXIgZGUgSmVyZW15IGEgZXhpc3TDqm5jaWEgZG8gbWFudXNjcml0bywgc2FiZW5kbyBxdWUgbyBzZXUgY29udGXDumRvIGRlc3Ryb8OnYXJpYSBhcXVlbGUgcGFpLCBqw6EgZW0gdMOjbyBncmFuZGUgc29mcmltZW50by4gTWFzLCDDoCBtZWRpZGEgcXVlIG9zIHNlbnRpbWVudG9zIGRlIExvd2VuIHBvciBKZXJlbXkgc2UgaW50ZW5zaWZpY2FtLCBlbGEgYXBlcmNlYmUtc2UgZGUgcXVlIHRhbHZleiBzZWphIG1lbGhvciBlbGUgbGVyIGFzIHBhbGF2cmFzIGVzY3JpdGFzIHBvciBWZXJpdHkuIEFmaW5hbCBkZSBjb250YXMsIHBvciBtYWlzIGRlZGljYWRvIHF1ZSBKZXJlbXkgc2VqYSDDoCBzdWEgbXVsaGVyIGRvZW50ZSwgdW1hIHZlcmRhZGUgdMOjbyBob3JyZW5kYSBmYXJpYSBjb20gcXVlIGZvc3NlIGltcG9zc8OtdmVsIGVsZSBjb250aW51YXIgYSBhbcOhLWxhLiBPcyBlbG9naW9zIGRhIGNyw610aWNhOiDCq0F2aXNvOiBWZXJpdHkgbsOjbyB2YWkgZGVycmV0ZXItbGhlIG8gY29yYcOnw6NvLi4uIFZhaSBpbmNlbmRpYXItbGhlIGEgYWxtYS7CuyAtIEtpbmRsZSBDcmFjayBCb29rIFJldmlld3MgwqtJc3RvIG7Do28gw6kgdW0gbGl2cm8sIMOpIHVtYSBleHBlcmnDqm5jaWEgdmlzY2VyYWwhwrsgLSBCLiBCLiBFYXN0b24sIGF1dG9yYSBiZXN0c2VsbGVyIiwKICAgICAgICAiaW5kdXN0cnlJZGVudGlmaWVycyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAiSVNCTl8xMyIsCiAgICAgICAgICAgICJpZGVudGlmaWVyIjogIjk3ODk4OTU2NDgyNjkiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJJU0JOXzEwIiwKICAgICAgICAgICAgImlkZW50aWZpZXIiOiAiOTg5NTY0ODI2WCIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJyZWFkaW5nTW9kZXMiOiB7CiAgICAgICAgICAidGV4dCI6IHRydWUsCiAgICAgICAgICAiaW1hZ2UiOiB0cnVlCiAgICAgICAgfSwKICAgICAgICAicGFnZUNvdW50IjogMjY5LAogICAgICAgICJwcmludFR5cGUiOiAiQk9PSyIsCiAgICAgICAgImNhdGVnb3JpZXMiOiBbCiAgICAgICAgICAiRmljdGlvbiIKICAgICAgICBdLAogICAgICAgICJtYXR1cml0eVJhdGluZyI6ICJOT1RfTUFUVVJFIiwKICAgICAgICAiYWxsb3dBbm9uTG9nZ2luZyI6IHRydWUsCiAgICAgICAgImNvbnRlbnRWZXJzaW9uIjogIjAuNi42LjAucHJldmlldy4zIiwKICAgICAgICAicGFuZWxpemF0aW9uU3VtbWFyeSI6IHsKICAgICAgICAgICJjb250YWluc0VwdWJCdWJibGVzIjogZmFsc2UsCiAgICAgICAgICAiY29udGFpbnNJbWFnZUJ1YmJsZXMiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgImltYWdlTGlua3MiOiB7CiAgICAgICAgICAic21hbGxUaHVtYm5haWwiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvY29udGVudD9pZD1USlpXRUFBQVFCQUomcHJpbnRzZWM9ZnJvbnRjb3ZlciZpbWc9MSZ6b29tPTUmZWRnZT1jdXJsJnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAgICJ0aHVtYm5haWwiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvY29udGVudD9pZD1USlpXRUFBQVFCQUomcHJpbnRzZWM9ZnJvbnRjb3ZlciZpbWc9MSZ6b29tPTEmZWRnZT1jdXJsJnNvdXJjZT1nYnNfYXBpIgogICAgICAgIH0sCiAgICAgICAgImxhbmd1YWdlIjogInB0IiwKICAgICAgICAicHJldmlld0xpbmsiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3M/aWQ9VEpaV0VBQUFRQkFKJnByaW50c2VjPWZyb250Y292ZXImZHE9dmVyaXR5JmhsPSZjZD0xJnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAiaW5mb0xpbmsiOiAiaHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYm9va3MvZGV0YWlscz9pZD1USlpXRUFBQVFCQUomc291cmNlPWdic19hcGkiLAogICAgICAgICJjYW5vbmljYWxWb2x1bWVMaW5rIjogImh0dHBzOi8vcGxheS5nb29nbGUuY29tL3N0b3JlL2Jvb2tzL2RldGFpbHM/aWQ9VEpaV0VBQUFRQkFKIgogICAgICB9LAogICAgICAic2FsZUluZm8iOiB7CiAgICAgICAgImNvdW50cnkiOiAiVVMiLAogICAgICAgICJzYWxlYWJpbGl0eSI6ICJGT1JfU0FMRSIsCiAgICAgICAgImlzRWJvb2siOiB0cnVlLAogICAgICAgICJsaXN0UHJpY2UiOiB7CiAgICAgICAgICAiYW1vdW50IjogMTIuOTksCiAgICAgICAgICAiY3VycmVuY3lDb2RlIjogIlVTRCIKICAgICAgICB9LAogICAgICAgICJyZXRhaWxQcmljZSI6IHsKICAgICAgICAgICJhbW91bnQiOiAxMi45OSwKICAgICAgICAgICJjdXJyZW5jeUNvZGUiOiAiVVNEIgogICAgICAgIH0sCiAgICAgICAgImJ1eUxpbmsiOiAiaHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYm9va3MvZGV0YWlscz9pZD1USlpXRUFBQVFCQUomcmRpZD1ib29rLVRKWldFQUFBUUJBSiZyZG90PTEmc291cmNlPWdic19hcGkiLAogICAgICAgICJvZmZlcnMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJmaW5za3lPZmZlclR5cGUiOiAxLAogICAgICAgICAgICAibGlzdFByaWNlIjogewogICAgICAgICAgICAgICJhbW91bnRJbk1pY3JvcyI6IDEyOTkwMDAwLAogICAgICAgICAgICAgICJjdXJyZW5jeUNvZGUiOiAiVVNEIgogICAgICAgICAgICB9LAogICAgICAgICAgICAicmV0YWlsUHJpY2UiOiB7CiAgICAgICAgICAgICAgImFtb3VudEluTWljcm9zIjogMTI5OTAwMDAsCiAgICAgICAgICAgICAgImN1cnJlbmN5Q29kZSI6ICJVU0QiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJnaWZ0YWJsZSI6IHRydWUKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJhY2Nlc3NJbmZvIjogewogICAgICAgICJjb3VudHJ5IjogIlVTIiwKICAgICAgICAidmlld2FiaWxpdHkiOiAiUEFSVElBTCIsCiAgICAgICAgImVtYmVkZGFibGUiOiB0cnVlLAogICAgICAgICJwdWJsaWNEb21haW4iOiBmYWxzZSwKICAgICAgICAidGV4dFRvU3BlZWNoUGVybWlzc2lvbiI6ICJBTExPV0VEX0ZPUl9BQ0NFU1NJQklMSVRZIiwKICAgICAgICAiZXB1YiI6IHsKICAgICAgICAgICJpc0F2YWlsYWJsZSI6IHRydWUsCiAgICAgICAgICAiYWNzVG9rZW5MaW5rIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2Rvd25sb2FkL1Zlcml0eS1zYW1wbGUtZXB1Yi5hY3NtP2lkPVRKWldFQUFBUUJBSiZmb3JtYXQ9ZXB1YiZvdXRwdXQ9YWNzNF9mdWxmaWxsbWVudF90b2tlbiZkbF90eXBlPXNhbXBsZSZzb3VyY2U9Z2JzX2FwaSIKICAgICAgICB9LAogICAgICAgICJwZGYiOiB7CiAgICAgICAgICAiaXNBdmFpbGFibGUiOiB0cnVlLAogICAgICAgICAgImFjc1Rva2VuTGluayI6ICJodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcy9kb3dubG9hZC9WZXJpdHktc2FtcGxlLXBkZi5hY3NtP2lkPVRKWldFQUFBUUJBSiZmb3JtYXQ9cGRmJm91dHB1dD1hY3M0X2Z1bGZpbGxtZW50X3Rva2VuJmRsX3R5cGU9c2FtcGxlJnNvdXJjZT1nYnNfYXBpIgogICAgICAgIH0sCiAgICAgICAgIndlYlJlYWRlckxpbmsiOiAiaHR0cDovL3BsYXkuZ29vZ2xlLmNvbS9ib29rcy9yZWFkZXI/aWQ9VEpaV0VBQUFRQkFKJmhsPSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImFjY2Vzc1ZpZXdTdGF0dXMiOiAiU0FNUExFIiwKICAgICAgICAicXVvdGVTaGFyaW5nQWxsb3dlZCI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJzZWFyY2hJbmZvIjogewogICAgICAgICJ0ZXh0U25pcHBldCI6ICJNYWlzIHVtIHJvbWFuY2UgZGUgc3VjZXNzby4gVmVyaXR5IMOpIHBlcnR1cmJhZG9yLCBhcnJlcGlhbnRlIGUgaW5lc3BlcmFkby4gVW1hIGV4cGVyacOqbmNpYSBpbmVzcXVlY8OtdmVsLiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAiYm9va3Mjdm9sdW1lIiwKICAgICAgImlkIjogIk95d3U4RF9HbkNVQyIsCiAgICAgICJldGFnIjogImd3UXUzcjkxejhZIiwKICAgICAgInNlbGZMaW5rIjogImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2Jvb2tzL3YxL3ZvbHVtZXMvT3l3dThEX0duQ1VDIiwKICAgICAgInZvbHVtZUluZm8iOiB7CiAgICAgICAgInRpdGxlIjogIkNvZGUgTmFtZSBWZXJpdHkiLAogICAgICAgICJhdXRob3JzIjogWwogICAgICAgICAgIkVsaXphYmV0aCBXZWluIgogICAgICAgIF0sCiAgICAgICAgInB1Ymxpc2hlciI6ICJMaXR0bGUsIEJyb3duIEJvb2tzIGZvciBZb3VuZyBSZWFkZXJzIiwKICAgICAgICAicHVibGlzaGVkRGF0ZSI6ICIyMDIwLTA1LTI2IiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiRG9u4oCZdCBtaXNzIEVsaXphYmV0aCBXZWlu4oCZcyBzdHVubmluZyBuZXcgbm92ZWwsIFN0YXRlbGVzcyBUaGUgYmVsb3ZlZCAjMSBOZXcgWW9yayBUaW1lcyBiZXN0c2VsbGVyLCBhIFwiZmllbmRpc2hseSBwbG90dGVkXCIgKE5ldyBZb3JrIFRpbWVzKSBcImhlYXJ0LWluLXlvdXIgbW91dGggYWR2ZW50dXJlXCIgKFdhc2hpbmd0b24gUG9zdCkgdGhhdCBcIndpbGwgdGFrZSB3aW5nIGFuZCBzb2FyIGludG8geW91ciBoZWFydFwiIChMYXVyaWUgSGFsc2UgQW5kZXJzb24pIE9jdG9iZXIgMTF0aCwgMTk0M+KAlEEgQnJpdGlzaCBzcHkgcGxhbmUgY3Jhc2hlcyBpbiBOYXppLW9jY3VwaWVkIEZyYW5jZS4gSXRzIHBpbG90IGFuZCBwYXNzZW5nZXIgYXJlIGJlc3QgZnJpZW5kcy4gT25lIG9mIHRoZSBnaXJscyBoYXMgYSBjaGFuY2UgYXQgc3Vydml2YWwuIFRoZSBvdGhlciBoYXMgbG9zdCB0aGUgZ2FtZSBiZWZvcmUgaXQncyBiYXJlbHkgYmVndW4uIFdoZW4gXCJWZXJpdHlcIiBpcyBhcnJlc3RlZCBieSB0aGUgR2VzdGFwbywgc2hlJ3Mgc3VyZSBzaGUgZG9lc24ndCBzdGFuZCBhIGNoYW5jZS4gQXMgYSBzZWNyZXQgYWdlbnQgY2FwdHVyZWQgaW4gZW5lbXkgdGVycml0b3J5LCBzaGUncyBsaXZpbmcgYSBzcHkncyB3b3JzdCBuaWdodG1hcmUuIEhlciBOYXppIGludGVycm9nYXRvcnMgZ2l2ZSBoZXIgYSBzaW1wbGUgY2hvaWNlOiByZXZlYWwgaGVyIG1pc3Npb24gb3IgZmFjZSBhIGdyaXNseSBleGVjdXRpb24uIEFzIHNoZSBpbnRyaWNhdGVseSB3ZWF2ZXMgaGVyIGNvbmZlc3Npb24sIFZlcml0eSB1bmNvdmVycyBoZXIgcGFzdCwgaG93IHNoZSBiZWNhbWUgZnJpZW5kcyB3aXRoIHRoZSBwaWxvdCBNYWRkaWUsIGFuZCB3aHkgc2hlIGxlZnQgTWFkZGllIGluIHRoZSB3cmVja2VkIGZ1c2VsYWdlIG9mIHRoZWlyIHBsYW5lLiBPbiBlYWNoIG5ldyBzY3JhcCBvZiBwYXBlciwgVmVyaXR5IGJhdHRsZXMgZm9yIGhlciBsaWZlLCBjb25mcm9udGluZyBoZXIgdmlld3Mgb24gY291cmFnZSwgZmFpbHVyZSBhbmQgaGVyIGRlc3BlcmF0ZSBob3BlIHRvIG1ha2UgaXQgaG9tZS4gQnV0IHdpbGwgdHJhZGluZyBoZXIgc2VjcmV0cyBiZSBlbm91Z2ggdG8gc2F2ZSBoZXIgZnJvbSB0aGUgZW5lbXk/IEEgdW5pdmVyc2FsbHkgYWNjbGFpbWVkIE1pY2hhZWwgTC4gUHJpbnR6IEF3YXJkIEhvbm9yIGJvb2ssIENvZGUgTmFtZSBWZXJpdHkgaXMgYSB2aXNjZXJhbCByZWFkIG9mIGRhbmdlciwgcmVzb2x2ZSwgYW5kIHN1cnZpdmFsIHRoYXQgc2hvd3MganVzdCBob3cgZmFyIHRydWUgZnJpZW5kcyB3aWxsIGdvIHRvIHNhdmUgZWFjaCBvdGhlci4iLAogICAgICAgICJpbmR1c3RyeUlkZW50aWZpZXJzIjogWwogICAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJJU0JOXzEzIiwKICAgICAgICAgICAgImlkZW50aWZpZXIiOiAiOTc4MTQyMzE1MzI1MiIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogIklTQk5fMTAiLAogICAgICAgICAgICAiaWRlbnRpZmllciI6ICIxNDIzMTUzMjUxIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInJlYWRpbmdNb2RlcyI6IHsKICAgICAgICAgICJ0ZXh0IjogdHJ1ZSwKICAgICAgICAgICJpbWFnZSI6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICAicGFnZUNvdW50IjogMzUzLAogICAgICAgICJwcmludFR5cGUiOiAiQk9PSyIsCiAgICAgICAgImNhdGVnb3JpZXMiOiBbCiAgICAgICAgICAiWW91bmcgQWR1bHQgRmljdGlvbiIKICAgICAgICBdLAogICAgICAgICJhdmVyYWdlUmF0aW5nIjogMywKICAgICAgICAicmF0aW5nc0NvdW50IjogMywKICAgICAgICAibWF0dXJpdHlSYXRpbmciOiAiTk9UX01BVFVSRSIsCiAgICAgICAgImFsbG93QW5vbkxvZ2dpbmciOiB0cnVlLAogICAgICAgICJjb250ZW50VmVyc2lvbiI6ICIyLjU1LjQ5LjAucHJldmlldy4yIiwKICAgICAgICAicGFuZWxpemF0aW9uU3VtbWFyeSI6IHsKICAgICAgICAgICJjb250YWluc0VwdWJCdWJibGVzIjogZmFsc2UsCiAgICAgICAgICAiY29udGFpbnNJbWFnZUJ1YmJsZXMiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgImltYWdlTGlua3MiOiB7CiAgICAgICAgICAic21hbGxUaHVtYm5haWwiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvY29udGVudD9pZD1PeXd1OERfR25DVUMmcHJpbnRzZWM9ZnJvbnRjb3ZlciZpbWc9MSZ6b29tPTUmZWRnZT1jdXJsJnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAgICJ0aHVtYm5haWwiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvY29udGVudD9pZD1PeXd1OERfR25DVUMmcHJpbnRzZWM9ZnJvbnRjb3ZlciZpbWc9MSZ6b29tPTEmZWRnZT1jdXJsJnNvdXJjZT1nYnNfYXBpIgogICAgICAgIH0sCiAgICAgICAgImxhbmd1YWdlIjogImVuIiwKICAgICAgICAicHJldmlld0xpbmsiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3M/aWQ9T3l3dThEX0duQ1VDJnByaW50c2VjPWZyb250Y292ZXImZHE9dmVyaXR5JmhsPSZjZD0yJnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAiaW5mb0xpbmsiOiAiaHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYm9va3MvZGV0YWlscz9pZD1PeXd1OERfR25DVUMmc291cmNlPWdic19hcGkiLAogICAgICAgICJjYW5vbmljYWxWb2x1bWVMaW5rIjogImh0dHBzOi8vcGxheS5nb29nbGUuY29tL3N0b3JlL2Jvb2tzL2RldGFpbHM/aWQ9T3l3dThEX0duQ1VDIgogICAgICB9LAogICAgICAic2FsZUluZm8iOiB7CiAgICAgICAgImNvdW50cnkiOiAiVVMiLAogICAgICAgICJzYWxlYWJpbGl0eSI6ICJGT1JfU0FMRSIsCiAgICAgICAgImlzRWJvb2siOiB0cnVlLAogICAgICAgICJsaXN0UHJpY2UiOiB7CiAgICAgICAgICAiYW1vdW50IjogOS45OSwKICAgICAgICAgICJjdXJyZW5jeUNvZGUiOiAiVVNEIgogICAgICAgIH0sCiAgICAgICAgInJldGFpbFByaWNlIjogewogICAgICAgICAgImFtb3VudCI6IDkuOTksCiAgICAgICAgICAiY3VycmVuY3lDb2RlIjogIlVTRCIKICAgICAgICB9LAogICAgICAgICJidXlMaW5rIjogImh0dHBzOi8vcGxheS5nb29nbGUuY29tL3N0b3JlL2Jvb2tzL2RldGFpbHM/aWQ9T3l3dThEX0duQ1VDJnJkaWQ9Ym9vay1PeXd1OERfR25DVUMmcmRvdD0xJnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAib2ZmZXJzIjogWwogICAgICAgICAgewogICAgICAgICAgICAiZmluc2t5T2ZmZXJUeXBlIjogMSwKICAgICAgICAgICAgImxpc3RQcmljZSI6IHsKICAgICAgICAgICAgICAiYW1vdW50SW5NaWNyb3MiOiA5OTkwMDAwLAogICAgICAgICAgICAgICJjdXJyZW5jeUNvZGUiOiAiVVNEIgogICAgICAgICAgICB9LAogICAgICAgICAgICAicmV0YWlsUHJpY2UiOiB7CiAgICAgICAgICAgICAgImFtb3VudEluTWljcm9zIjogOTk5MDAwMCwKICAgICAgICAgICAgICAiY3VycmVuY3lDb2RlIjogIlVTRCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImdpZnRhYmxlIjogdHJ1ZQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgImFjY2Vzc0luZm8iOiB7CiAgICAgICAgImNvdW50cnkiOiAiVVMiLAogICAgICAgICJ2aWV3YWJpbGl0eSI6ICJQQVJUSUFMIiwKICAgICAgICAiZW1iZWRkYWJsZSI6IHRydWUsCiAgICAgICAgInB1YmxpY0RvbWFpbiI6IGZhbHNlLAogICAgICAgICJ0ZXh0VG9TcGVlY2hQZXJtaXNzaW9uIjogIkFMTE9XRUQiLAogICAgICAgICJlcHViIjogewogICAgICAgICAgImlzQXZhaWxhYmxlIjogdHJ1ZSwKICAgICAgICAgICJhY3NUb2tlbkxpbmsiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvZG93bmxvYWQvQ29kZV9OYW1lX1Zlcml0eS1zYW1wbGUtZXB1Yi5hY3NtP2lkPU95d3U4RF9HbkNVQyZmb3JtYXQ9ZXB1YiZvdXRwdXQ9YWNzNF9mdWxmaWxsbWVudF90b2tlbiZkbF90eXBlPXNhbXBsZSZzb3VyY2U9Z2JzX2FwaSIKICAgICAgICB9LAogICAgICAgICJwZGYiOiB7CiAgICAgICAgICAiaXNBdmFpbGFibGUiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgIndlYlJlYWRlckxpbmsiOiAiaHR0cDovL3BsYXkuZ29vZ2xlLmNvbS9ib29rcy9yZWFkZXI/aWQ9T3l3dThEX0duQ1VDJmhsPSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImFjY2Vzc1ZpZXdTdGF0dXMiOiAiU0FNUExFIiwKICAgICAgICAicXVvdGVTaGFyaW5nQWxsb3dlZCI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJzZWFyY2hJbmZvIjogewogICAgICAgICJ0ZXh0U25pcHBldCI6ICJBIHVuaXZlcnNhbGx5IGFjY2xhaW1lZCBNaWNoYWVsIEwuIFByaW50eiBBd2FyZCBIb25vciBib29rLCBDb2RlIE5hbWUgVmVyaXR5IGlzIGEgdmlzY2VyYWwgcmVhZCBvZiBkYW5nZXIsIHJlc29sdmUsIGFuZCBzdXJ2aXZhbCB0aGF0IHNob3dzIGp1c3QgaG93IGZhciB0cnVlIGZyaWVuZHMgd2lsbCBnbyB0byBzYXZlIGVhY2ggb3RoZXIuIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJib29rcyN2b2x1bWUiLAogICAgICAiaWQiOiAidFZUbXpnRUFDQUFKIiwKICAgICAgImV0YWciOiAiSkhCbS93TzFpVm8iLAogICAgICAic2VsZkxpbmsiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYm9va3MvdjEvdm9sdW1lcy90VlRtemdFQUNBQUoiLAogICAgICAidm9sdW1lSW5mbyI6IHsKICAgICAgICAidGl0bGUiOiAiVmVyaXR5IiwKICAgICAgICAiYXV0aG9ycyI6IFsKICAgICAgICAgICJDb2xsZWVuIEhvb3ZlciIKICAgICAgICBdLAogICAgICAgICJwdWJsaXNoZWREYXRlIjogIjIwMjItMDktMjciLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJXaG9zZSB0cnV0aCBpcyB0aGUgbGllPyBTdGF5IHVwIGFsbCBuaWdodCByZWFkaW5nIHRoZSBzZW5zYXRpb25hbCBwc3ljaG9sb2dpY2FsIHRocmlsbGVyIHRoYXQgaGFzIHJlYWRlcnMgb2JzZXNzZWQsIGZyb20gdGhlICMxIE5ldyBZb3JrIFRpbWVzIGJlc3RzZWxsaW5nIGF1dGhvciBvZiBJdCBFbmRzIFdpdGggVXMuIExvd2VuIEFzaGxlaWdoIGlzIGEgc3RydWdnbGluZyB3cml0ZXIgb24gdGhlIGJyaW5rIG9mIGZpbmFuY2lhbCBydWluIHdoZW4gc2hlIGFjY2VwdHMgdGhlIGpvYiBvZmZlciBvZiBhIGxpZmV0aW1lLiBKZXJlbXkgQ3Jhd2ZvcmQsIGh1c2JhbmQgb2YgYmVzdHNlbGxpbmcgYXV0aG9yIFZlcml0eSBDcmF3Zm9yZCwgaGFzIGhpcmVkIExvd2VuIHRvIGNvbXBsZXRlIHRoZSByZW1haW5pbmcgYm9va3MgaW4gYSBzdWNjZXNzZnVsIHNlcmllcyBoaXMgaW5qdXJlZCB3aWZlIGlzIHVuYWJsZSB0byBmaW5pc2guIExvd2VuIGFycml2ZXMgYXQgdGhlIENyYXdmb3JkIGhvbWUsIHJlYWR5IHRvIHNvcnQgdGhyb3VnaCB5ZWFycyBvZiBWZXJpdHkncyBub3RlcyBhbmQgb3V0bGluZXMsIGhvcGluZyB0byBmaW5kIGVub3VnaCBtYXRlcmlhbCB0byBnZXQgaGVyIHN0YXJ0ZWQuIFdoYXQgTG93ZW4gZG9lc24ndCBleHBlY3QgdG8gdW5jb3ZlciBpbiB0aGUgY2hhb3RpYyBvZmZpY2UgaXMgYW4gdW5maW5pc2hlZCBhdXRvYmlvZ3JhcGh5IFZlcml0eSBuZXZlciBpbnRlbmRlZCBmb3IgYW55b25lIHRvIHJlYWQuIFBhZ2UgYWZ0ZXIgcGFnZSBvZiBib25lLWNoaWxsaW5nIGFkbWlzc2lvbnMsIGluY2x1ZGluZyBWZXJpdHkncyByZWNvbGxlY3Rpb24gb2YgdGhlIG5pZ2h0IGhlciBmYW1pbHkgd2FzIGZvcmV2ZXIgYWx0ZXJlZC4gTG93ZW4gZGVjaWRlcyB0byBrZWVwIHRoZSBtYW51c2NyaXB0IGhpZGRlbiBmcm9tIEplcmVteSwga25vd2luZyBpdHMgY29udGVudHMgY291bGQgZGV2YXN0YXRlIHRoZSBhbHJlYWR5IGdyaWV2aW5nIGZhdGhlci4gQnV0IGFzIExvd2VuJ3MgZmVlbGluZ3MgZm9yIEplcmVteSBiZWdpbiB0byBpbnRlbnNpZnksIHNoZSByZWNvZ25pemVzIGFsbCB0aGUgd2F5cyBzaGUgY291bGQgYmVuZWZpdCBpZiBoZSB3ZXJlIHRvIHJlYWQgaGlzIHdpZmUncyB3b3Jkcy4gQWZ0ZXIgYWxsLCBubyBtYXR0ZXIgaG93IGRldm90ZWQgSmVyZW15IGlzIHRvIGhpcyBpbmp1cmVkIHdpZmUsIGEgdHJ1dGggdGhpcyBob3JyaWZ5aW5nIHdvdWxkIG1ha2UgaXQgaW1wb3NzaWJsZSBmb3IgaGltIHRvIGNvbnRpbnVlIGxvdmluZyBoZXIuIiwKICAgICAgICAiaW5kdXN0cnlJZGVudGlmaWVycyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAiSVNCTl8xMCIsCiAgICAgICAgICAgICJpZGVudGlmaWVyIjogIjE1Mzg3Mzk3MjAiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJJU0JOXzEzIiwKICAgICAgICAgICAgImlkZW50aWZpZXIiOiAiOTc4MTUzODczOTcyMyIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJyZWFkaW5nTW9kZXMiOiB7CiAgICAgICAgICAidGV4dCI6IGZhbHNlLAogICAgICAgICAgImltYWdlIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJwYWdlQ291bnQiOiAzMzYsCiAgICAgICAgInByaW50VHlwZSI6ICJCT09LIiwKICAgICAgICAiY2F0ZWdvcmllcyI6IFsKICAgICAgICAgICJGaWN0aW9uIgogICAgICAgIF0sCiAgICAgICAgIm1hdHVyaXR5UmF0aW5nIjogIk5PVF9NQVRVUkUiLAogICAgICAgICJhbGxvd0Fub25Mb2dnaW5nIjogZmFsc2UsCiAgICAgICAgImNvbnRlbnRWZXJzaW9uIjogInByZXZpZXctMS4wLjAiLAogICAgICAgICJwYW5lbGl6YXRpb25TdW1tYXJ5IjogewogICAgICAgICAgImNvbnRhaW5zRXB1YkJ1YmJsZXMiOiBmYWxzZSwKICAgICAgICAgICJjb250YWluc0ltYWdlQnViYmxlcyI6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICAiaW1hZ2VMaW5rcyI6IHsKICAgICAgICAgICJzbWFsbFRodW1ibmFpbCI6ICJodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcy9jb250ZW50P2lkPXRWVG16Z0VBQ0FBSiZwcmludHNlYz1mcm9udGNvdmVyJmltZz0xJnpvb209NSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgICAidGh1bWJuYWlsIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2NvbnRlbnQ/aWQ9dFZUbXpnRUFDQUFKJnByaW50c2VjPWZyb250Y292ZXImaW1nPTEmem9vbT0xJnNvdXJjZT1nYnNfYXBpIgogICAgICAgIH0sCiAgICAgICAgImxhbmd1YWdlIjogImVuIiwKICAgICAgICAicHJldmlld0xpbmsiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3M/aWQ9dFZUbXpnRUFDQUFKJmRxPXZlcml0eSZobD0mY2Q9MyZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImluZm9MaW5rIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzP2lkPXRWVG16Z0VBQ0FBSiZkcT12ZXJpdHkmaGw9JnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAiY2Fub25pY2FsVm9sdW1lTGluayI6ICJodHRwczovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvYWJvdXQvVmVyaXR5Lmh0bWw/aGw9JmlkPXRWVG16Z0VBQ0FBSiIKICAgICAgfSwKICAgICAgInNhbGVJbmZvIjogewogICAgICAgICJjb3VudHJ5IjogIlVTIiwKICAgICAgICAic2FsZWFiaWxpdHkiOiAiTk9UX0ZPUl9TQUxFIiwKICAgICAgICAiaXNFYm9vayI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJhY2Nlc3NJbmZvIjogewogICAgICAgICJjb3VudHJ5IjogIlVTIiwKICAgICAgICAidmlld2FiaWxpdHkiOiAiTk9fUEFHRVMiLAogICAgICAgICJlbWJlZGRhYmxlIjogZmFsc2UsCiAgICAgICAgInB1YmxpY0RvbWFpbiI6IGZhbHNlLAogICAgICAgICJ0ZXh0VG9TcGVlY2hQZXJtaXNzaW9uIjogIkFMTE9XRUQiLAogICAgICAgICJlcHViIjogewogICAgICAgICAgImlzQXZhaWxhYmxlIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJwZGYiOiB7CiAgICAgICAgICAiaXNBdmFpbGFibGUiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgIndlYlJlYWRlckxpbmsiOiAiaHR0cDovL3BsYXkuZ29vZ2xlLmNvbS9ib29rcy9yZWFkZXI/aWQ9dFZUbXpnRUFDQUFKJmhsPSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImFjY2Vzc1ZpZXdTdGF0dXMiOiAiTk9ORSIsCiAgICAgICAgInF1b3RlU2hhcmluZ0FsbG93ZWQiOiBmYWxzZQogICAgICB9LAogICAgICAic2VhcmNoSW5mbyI6IHsKICAgICAgICAidGV4dFNuaXBwZXQiOiAiSmVyZW15IENyYXdmb3JkLCBodXNiYW5kIG9mIGJlc3RzZWxsaW5nIGF1dGhvciBWZXJpdHkgQ3Jhd2ZvcmQsIGhhcyBoaXJlZCBMb3dlbiB0byBjb21wbGV0ZSB0aGUgcmVtYWluaW5nIGJvb2tzIGluIGEgc3VjY2Vzc2Z1bCBzZXJpZXMgaGlzIGluanVyZWQgd2lmZSBpcyB1bmFibGUgdG8gZmluaXNoLiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAiYm9va3Mjdm9sdW1lIiwKICAgICAgImlkIjogIlpKNWtEd0FBUUJBSiIsCiAgICAgICJldGFnIjogIkZPLzlFZ3IrYUxrIiwKICAgICAgInNlbGZMaW5rIjogImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2Jvb2tzL3YxL3ZvbHVtZXMvWko1a0R3QUFRQkFKIiwKICAgICAgInZvbHVtZUluZm8iOiB7CiAgICAgICAgInRpdGxlIjogIlZlcml0eSAoVGhlIFN1Z2FyIEJhcm9uJ3MgRGF1Z2h0ZXJzIEJvb2sgIzIpIiwKICAgICAgICAiYXV0aG9ycyI6IFsKICAgICAgICAgICJMaXNhIFQuIEJlcmdyZW4iCiAgICAgICAgXSwKICAgICAgICAicHVibGlzaGVyIjogIkJha2VyIEJvb2tzIiwKICAgICAgICAicHVibGlzaGVkRGF0ZSI6ICIyMDE5LTA0LTAyIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiQWZ0ZXIgbGVhdmluZyBFbmdsYW5kIGJlaGluZCBmb3IgYSBuZXcgbGlmZSBpbiB0aGUgV2VzdCBJbmRpZXMgd2l0aCBoZXIgc2lzdGVycywgVmVyaXR5IEJhbm5pbmcgd2FudHMgc29tZXRoaW5nIHRvIGNhbGwgaGVyIG93bi4gSGVyIGFmZmluaXR5IGZvciBhbmltYWxzIGluc3BpcmVzIGhlciB0byBzZXQgdXAgYSBidXNpbmVzcyBpbXBvcnRpbmcgaG9yc2VzLCBhcyB3ZWxsIGFzIG90aGVyIGdvb2RzIGluIGRlbWFuZCBieSB0aGUgaXNsYW5kIHJlc2lkZW50cy4gQnV0IHdoZW4gc2hlIGFycml2ZXMgaW4gdGhlIENvbG9uaWVzIHRvIHB1cmNoYXNlIGhlciBnb29kcywgdW5leHBlY3RlZCBuZXdzIG9mIENhcHRhaW4gRHVuY2FuIE1jS2ludHJpY2sgYXdhaXRzIGhlci0tYXMgZG9lcyB0aGUgY2FwdGFpbidzIGhhbmRzb21lIGJyb3RoZXIsIElhbi0td2hvc2Ugc3ltcGF0aGllcyBsaWUgd2l0aCB0aGUgZmxlZGdsaW5nIFBhdHJpb3QgY2F1c2UuIEFzIHRoZSBncmVhdC1ncmFuZGRhdWdodGVyIG9mIGEgQnJpdGlzaCBnZW5lcmFsIGFuZCBmcmllbmQgdG8gbWFueSBMb3lhbGlzdHMsIFZlcml0eSBiZWxpZXZlZCBhbGwgc2hlIHdhbnRlZCB3YXMgYSBwZWFjZWZ1bCByZXNvbHV0aW9uLiBCdXQgYm90aCB0aGUgUGF0cmlvdHMgYW5kIHRoZSBpbXBhc3Npb25lZCBJYW4gTWNLaW50cmljayBhcmUgc3RlYWRpbHkgbGF5aW5nIGNsYWltIHRvIGhlciBoZWFydC4gV2hlbiBmYWNlZCB3aXRoIHRoZSBkZWNpc2lvbiBvZiB3aGF0LS1hbmQgZm9yIHdob20tLXNoZSB3aWxsIGZpZ2h0LCBjYW4gc2hlIHNldCBoZXIgZmVldCBvbiBhIG5ldyBwYXRoIGRlc3BpdGUgdGhlIGRhbmdlciB0aGF0IGF3YWl0cz8iLAogICAgICAgICJpbmR1c3RyeUlkZW50aWZpZXJzIjogWwogICAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJJU0JOXzEzIiwKICAgICAgICAgICAgImlkZW50aWZpZXIiOiAiOTc4MTQ5MzQxNzIxNiIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogIklTQk5fMTAiLAogICAgICAgICAgICAiaWRlbnRpZmllciI6ICIxNDkzNDE3MjE1IgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInJlYWRpbmdNb2RlcyI6IHsKICAgICAgICAgICJ0ZXh0IjogdHJ1ZSwKICAgICAgICAgICJpbWFnZSI6IHRydWUKICAgICAgICB9LAogICAgICAgICJwYWdlQ291bnQiOiAzODQsCiAgICAgICAgInByaW50VHlwZSI6ICJCT09LIiwKICAgICAgICAiY2F0ZWdvcmllcyI6IFsKICAgICAgICAgICJGaWN0aW9uIgogICAgICAgIF0sCiAgICAgICAgIm1hdHVyaXR5UmF0aW5nIjogIk5PVF9NQVRVUkUiLAogICAgICAgICJhbGxvd0Fub25Mb2dnaW5nIjogdHJ1ZSwKICAgICAgICAiY29udGVudFZlcnNpb24iOiAiMS4yLjIuMC5wcmV2aWV3LjMiLAogICAgICAgICJwYW5lbGl6YXRpb25TdW1tYXJ5IjogewogICAgICAgICAgImNvbnRhaW5zRXB1YkJ1YmJsZXMiOiBmYWxzZSwKICAgICAgICAgICJjb250YWluc0ltYWdlQnViYmxlcyI6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICAiaW1hZ2VMaW5rcyI6IHsKICAgICAgICAgICJzbWFsbFRodW1ibmFpbCI6ICJodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcy9jb250ZW50P2lkPVpKNWtEd0FBUUJBSiZwcmludHNlYz1mcm9udGNvdmVyJmltZz0xJnpvb209NSZlZGdlPWN1cmwmc291cmNlPWdic19hcGkiLAogICAgICAgICAgInRodW1ibmFpbCI6ICJodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcy9jb250ZW50P2lkPVpKNWtEd0FBUUJBSiZwcmludHNlYz1mcm9udGNvdmVyJmltZz0xJnpvb209MSZlZGdlPWN1cmwmc291cmNlPWdic19hcGkiCiAgICAgICAgfSwKICAgICAgICAibGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICJwcmV2aWV3TGluayI6ICJodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcz9pZD1aSjVrRHdBQVFCQUomcHJpbnRzZWM9ZnJvbnRjb3ZlciZkcT12ZXJpdHkmaGw9JmNkPTQmc291cmNlPWdic19hcGkiLAogICAgICAgICJpbmZvTGluayI6ICJodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9ib29rcy9kZXRhaWxzP2lkPVpKNWtEd0FBUUJBSiZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImNhbm9uaWNhbFZvbHVtZUxpbmsiOiAiaHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYm9va3MvZGV0YWlscz9pZD1aSjVrRHdBQVFCQUoiCiAgICAgIH0sCiAgICAgICJzYWxlSW5mbyI6IHsKICAgICAgICAiY291bnRyeSI6ICJVUyIsCiAgICAgICAgInNhbGVhYmlsaXR5IjogIkZPUl9TQUxFIiwKICAgICAgICAiaXNFYm9vayI6IHRydWUsCiAgICAgICAgImxpc3RQcmljZSI6IHsKICAgICAgICAgICJhbW91bnQiOiAxNC45OSwKICAgICAgICAgICJjdXJyZW5jeUNvZGUiOiAiVVNEIgogICAgICAgIH0sCiAgICAgICAgInJldGFpbFByaWNlIjogewogICAgICAgICAgImFtb3VudCI6IDE0Ljk5LAogICAgICAgICAgImN1cnJlbmN5Q29kZSI6ICJVU0QiCiAgICAgICAgfSwKICAgICAgICAiYnV5TGluayI6ICJodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9ib29rcy9kZXRhaWxzP2lkPVpKNWtEd0FBUUJBSiZyZGlkPWJvb2stWko1a0R3QUFRQkFKJnJkb3Q9MSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgIm9mZmVycyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImZpbnNreU9mZmVyVHlwZSI6IDEsCiAgICAgICAgICAgICJsaXN0UHJpY2UiOiB7CiAgICAgICAgICAgICAgImFtb3VudEluTWljcm9zIjogMTQ5OTAwMDAsCiAgICAgICAgICAgICAgImN1cnJlbmN5Q29kZSI6ICJVU0QiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJyZXRhaWxQcmljZSI6IHsKICAgICAgICAgICAgICAiYW1vdW50SW5NaWNyb3MiOiAxNDk5MDAwMCwKICAgICAgICAgICAgICAiY3VycmVuY3lDb2RlIjogIlVTRCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImdpZnRhYmxlIjogdHJ1ZQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgImFjY2Vzc0luZm8iOiB7CiAgICAgICAgImNvdW50cnkiOiAiVVMiLAogICAgICAgICJ2aWV3YWJpbGl0eSI6ICJQQVJUSUFMIiwKICAgICAgICAiZW1iZWRkYWJsZSI6IHRydWUsCiAgICAgICAgInB1YmxpY0RvbWFpbiI6IGZhbHNlLAogICAgICAgICJ0ZXh0VG9TcGVlY2hQZXJtaXNzaW9uIjogIkFMTE9XRUQiLAogICAgICAgICJlcHViIjogewogICAgICAgICAgImlzQXZhaWxhYmxlIjogdHJ1ZSwKICAgICAgICAgICJhY3NUb2tlbkxpbmsiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvZG93bmxvYWQvVmVyaXR5X1RoZV9TdWdhcl9CYXJvbl9zX0RhdWdodGVyc19Cb29rLXNhbXBsZS1lcHViLmFjc20/aWQ9Wko1a0R3QUFRQkFKJmZvcm1hdD1lcHViJm91dHB1dD1hY3M0X2Z1bGZpbGxtZW50X3Rva2VuJmRsX3R5cGU9c2FtcGxlJnNvdXJjZT1nYnNfYXBpIgogICAgICAgIH0sCiAgICAgICAgInBkZiI6IHsKICAgICAgICAgICJpc0F2YWlsYWJsZSI6IHRydWUsCiAgICAgICAgICAiYWNzVG9rZW5MaW5rIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2Rvd25sb2FkL1Zlcml0eV9UaGVfU3VnYXJfQmFyb25fc19EYXVnaHRlcnNfQm9vay1zYW1wbGUtcGRmLmFjc20/aWQ9Wko1a0R3QUFRQkFKJmZvcm1hdD1wZGYmb3V0cHV0PWFjczRfZnVsZmlsbG1lbnRfdG9rZW4mZGxfdHlwZT1zYW1wbGUmc291cmNlPWdic19hcGkiCiAgICAgICAgfSwKICAgICAgICAid2ViUmVhZGVyTGluayI6ICJodHRwOi8vcGxheS5nb29nbGUuY29tL2Jvb2tzL3JlYWRlcj9pZD1aSjVrRHdBQVFCQUomaGw9JnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAiYWNjZXNzVmlld1N0YXR1cyI6ICJTQU1QTEUiLAogICAgICAgICJxdW90ZVNoYXJpbmdBbGxvd2VkIjogZmFsc2UKICAgICAgfSwKICAgICAgInNlYXJjaEluZm8iOiB7CiAgICAgICAgInRleHRTbmlwcGV0IjogIiZxdW90O0JlcmdyZW4gdGllcyB0aGUgc2VlZHMgb2YgdGhlIEFtZXJpY2FuIFJldm9sdXRpb24gaW50byBoZXIgc2VyaWVzLCBhZGRpbmcgYW4gZWxlbWVudCBvZiBpbnRyaWd1ZSB0byB0aGUgc3RvcnlsaW5lLiAuIC4gLiBWZXJpdHkgaXMgaW50ZWxsaWdlbnQsIHNwdW5reSwgYW5kIHdhcm0taGVhcnRlZC4iCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogImJvb2tzI3ZvbHVtZSIsCiAgICAgICJpZCI6ICJhNmNwemdFQUNBQUoiLAogICAgICAiZXRhZyI6ICJNVEhKWWhDRmJFSSIsCiAgICAgICJzZWxmTGluayI6ICJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9ib29rcy92MS92b2x1bWVzL2E2Y3B6Z0VBQ0FBSiIsCiAgICAgICJ2b2x1bWVJbmZvIjogewogICAgICAgICJ0aXRsZSI6ICJBbGV4IFNpeCIsCiAgICAgICAgImF1dGhvcnMiOiBbCiAgICAgICAgICAiVmluY2VudCBUYXBsaW4iCiAgICAgICAgXSwKICAgICAgICAicHVibGlzaGVkRGF0ZSI6ICIyMDIxLTAxLTE1IiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiQWxleGEgYW5kIEZyYW5jaXMgd2VyZSB3ZWFsdGh5IGV4ZWN1dGl2ZXMgd2hvIGhhZCBldmVyeXRoaW5nLCBleGNlcHQgZm9yIGtpZHMuIFdoZW4gaGUgdHJhZ2ljYWxseSBwYXNzZWQgYXdheSwgc2hlIGdhdmUgdXAgaG9wZSBmb3IgYmVpbmcgYSBtb3RoZXI/IHVudGlsIHNoZSBtZXQgVmljayBNaWxsZXIsIGEgc2ltcGxlIGZhbWlseSBtYW4sIGFuZCBhIG5lYXJseSBwZXJmZWN0IGRvcHBlbGdhbmdlciBvZiBoZXIgaHVzYmFuZC5TaGUgcGF5cyBoaW0gaGFuZHNvbWVseSBmb3IgaGlzIGRvbmF0aW9ucyB0byBwcm9kdWNlIGEgY2hpbGQgd2hvIHJlc2VtYmxlcyBoZXIgYmVsb3ZlZCBodXNiYW5kLiBUaGUgb2ZmZXJzIGdyb3cgbW9yZSBlbnRpY2luZyBhbmQgVmljaydzIG1hcnJpYWdlIGJlZ2lucyB0byBzdHJhaW4uQWxleGEgd2FudHMgaGlzIGdlbmVzPyBoaXMgbG9va3MgYW55d2F5LiBTaGUgaXMgd2VhbHRoeSwgYXR0cmFjdGl2ZSwgcG93ZXJmdWwsIGFuZCB1dHRlcmx5IG9ic2Vzc2VkLiIsCiAgICAgICAgImluZHVzdHJ5SWRlbnRpZmllcnMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogIklTQk5fMTAiLAogICAgICAgICAgICAiaWRlbnRpZmllciI6ICIxNzM0ODEzODY1IgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAiSVNCTl8xMyIsCiAgICAgICAgICAgICJpZGVudGlmaWVyIjogIjk3ODE3MzQ4MTM4NjkiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicmVhZGluZ01vZGVzIjogewogICAgICAgICAgInRleHQiOiBmYWxzZSwKICAgICAgICAgICJpbWFnZSI6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICAicHJpbnRUeXBlIjogIkJPT0siLAogICAgICAgICJtYXR1cml0eVJhdGluZyI6ICJOT1RfTUFUVVJFIiwKICAgICAgICAiYWxsb3dBbm9uTG9nZ2luZyI6IGZhbHNlLAogICAgICAgICJjb250ZW50VmVyc2lvbiI6ICJwcmV2aWV3LTEuMC4wIiwKICAgICAgICAicGFuZWxpemF0aW9uU3VtbWFyeSI6IHsKICAgICAgICAgICJjb250YWluc0VwdWJCdWJibGVzIjogZmFsc2UsCiAgICAgICAgICAiY29udGFpbnNJbWFnZUJ1YmJsZXMiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgImltYWdlTGlua3MiOiB7CiAgICAgICAgICAic21hbGxUaHVtYm5haWwiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvY29udGVudD9pZD1hNmNwemdFQUNBQUomcHJpbnRzZWM9ZnJvbnRjb3ZlciZpbWc9MSZ6b29tPTUmc291cmNlPWdic19hcGkiLAogICAgICAgICAgInRodW1ibmFpbCI6ICJodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcy9jb250ZW50P2lkPWE2Y3B6Z0VBQ0FBSiZwcmludHNlYz1mcm9udGNvdmVyJmltZz0xJnpvb209MSZzb3VyY2U9Z2JzX2FwaSIKICAgICAgICB9LAogICAgICAgICJsYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgInByZXZpZXdMaW5rIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzP2lkPWE2Y3B6Z0VBQ0FBSiZkcT12ZXJpdHkmaGw9JmNkPTUmc291cmNlPWdic19hcGkiLAogICAgICAgICJpbmZvTGluayI6ICJodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcz9pZD1hNmNwemdFQUNBQUomZHE9dmVyaXR5JmhsPSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImNhbm9uaWNhbFZvbHVtZUxpbmsiOiAiaHR0cHM6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2Fib3V0L0FsZXhfU2l4Lmh0bWw/aGw9JmlkPWE2Y3B6Z0VBQ0FBSiIKICAgICAgfSwKICAgICAgInNhbGVJbmZvIjogewogICAgICAgICJjb3VudHJ5IjogIlVTIiwKICAgICAgICAic2FsZWFiaWxpdHkiOiAiTk9UX0ZPUl9TQUxFIiwKICAgICAgICAiaXNFYm9vayI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJhY2Nlc3NJbmZvIjogewogICAgICAgICJjb3VudHJ5IjogIlVTIiwKICAgICAgICAidmlld2FiaWxpdHkiOiAiTk9fUEFHRVMiLAogICAgICAgICJlbWJlZGRhYmxlIjogZmFsc2UsCiAgICAgICAgInB1YmxpY0RvbWFpbiI6IGZhbHNlLAogICAgICAgICJ0ZXh0VG9TcGVlY2hQZXJtaXNzaW9uIjogIkFMTE9XRUQiLAogICAgICAgICJlcHViIjogewogICAgICAgICAgImlzQXZhaWxhYmxlIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJwZGYiOiB7CiAgICAgICAgICAiaXNBdmFpbGFibGUiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgIndlYlJlYWRlckxpbmsiOiAiaHR0cDovL3BsYXkuZ29vZ2xlLmNvbS9ib29rcy9yZWFkZXI/aWQ9YTZjcHpnRUFDQUFKJmhsPSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImFjY2Vzc1ZpZXdTdGF0dXMiOiAiTk9ORSIsCiAgICAgICAgInF1b3RlU2hhcmluZ0FsbG93ZWQiOiBmYWxzZQogICAgICB9LAogICAgICAic2VhcmNoSW5mbyI6IHsKICAgICAgICAidGV4dFNuaXBwZXQiOiAiQWxleGEgYW5kIEZyYW5jaXMgd2VyZSB3ZWFsdGh5IGV4ZWN1dGl2ZXMgd2hvIGhhZCBldmVyeXRoaW5nLCBleGNlcHQgZm9yIGtpZHMuIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJib29rcyN2b2x1bWUiLAogICAgICAiaWQiOiAibFJJcUVBQUFRQkFKIiwKICAgICAgImV0YWciOiAiTXhpU0lHTTFkYlkiLAogICAgICAic2VsZkxpbmsiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYm9va3MvdjEvdm9sdW1lcy9sUklxRUFBQVFCQUoiLAogICAgICAidm9sdW1lSW5mbyI6IHsKICAgICAgICAidGl0bGUiOiAiU2VjcmV0cyBvZiBPdXIgSG91c2UiLAogICAgICAgICJzdWJ0aXRsZSI6ICJBIE5vdmVsIiwKICAgICAgICAiYXV0aG9ycyI6IFsKICAgICAgICAgICJSZWEgRnJleSIKICAgICAgICBdLAogICAgICAgICJwdWJsaXNoZXIiOiAiU3QuIE1hcnRpbidzIEdyaWZmaW4iLAogICAgICAgICJwdWJsaXNoZWREYXRlIjogIjIwMjItMDItMDgiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJBIHRocmlsbGluZyBkb21lc3RpYyBkcmFtYSBzZXQgYWdhaW5zdCB0aGUgcG93ZXIgb2YgdGhlIHdpbGRlcm5lc3MsIFJlYSBGcmV5J3MgU2VjcmV0cyBvZiBPdXIgSG91c2UgaXMgYSBkZWVwbHktZmVsdCBub3ZlbCBvZiBsb25nLWhlbGQgc2VjcmV0cyBhbmQgdGhlIHN0cmVuZ3RoIG9mIGZhbWlseS4gRGVzaSBpcyB0aGUgbWFzdGVybWluZCBiZWhpbmQgaGVyIGRyZWFtIGdldGF3YXkgaG91c2UuIE5lc3RsZWQgaGlnaCBpbnRvIHRoZSBtb3VudGFpbnMgb2YgTm9ydGggQ2Fyb2xpbmEsIGl0IGlzIGEgc2xlZWsgcGxhY2UsIGEgbHV4dXJpb3VzIHBsYWNlLCBhIGRhcmsgcGxhY2UuIEEgcGxhY2UgZnVsbCBvZiBzZWNyZXRzLiBTZWNyZXRzIGFib3V0IHRoZSBtYW4gc2hlIGxvbmdzIGZvciwgYSBtYW4gd2hvIGlzIG5vdCBoZXIgaHVzYmFuZC4gU2VjcmV0cyBhYm91dCB0aGUgcm9vdHMgb2YgaGVyIGZhbWlseSB0aGF0IG11c3QgbmV2ZXIsIGV2ZXIsIHNlZSB0aGUgbGlnaHQgb2YgZGF5LiBXaGVuIERlc2kgYW5kIGhlciBmYW1pbHkgYXJyaXZlIGZyb20gQ2hpY2FnbyB0byBzcGVuZCB0aGUgc3VtbWVyIGluIHRoZSBtb3VudGFpbnMsIHRoZSBzZWVkcyBmb3IgdGhlIHR1bXVsdHVvdXMgbW9udGhzIHRvIGZvbGxvdyBhcmUgcGxhbnRlZOKAlGhlciBtYXJyaWFnZSBvbiB0aGUgcm9ja3MsIG5vdCBrbm93aW5nIHdoaWNoIHdheSB0aGV54oCZbGwgZ28uIEhlciBzZXZlbnRlZW4geWVhci1vbGQgZGF1Z2h0ZXIgSnVsZXMsIGZhbGxpbmcgaW4gbG92ZSBmb3IgdGhlIGZpcnN0IHRpbWUgd2l0aCBhIGxvY2FsIGJveeKAlGFuZCBmb3JnaW5nIGEgbmV3IHBhdGggdGhhdCB3aWxsIHRha2UgaGVyIHRvIHVuY2hhcnRlZCBwbGFjZXMuIEFuZCBDYXJ0ZXLigJRhIG1hbiBEZXNpIGtuZXcgbG9uZyBhZ28sIGJlZm9yZSBzaGUgZXhwdW5nZWQgaGltIGZyb20gaGVyIGxpZmUgZm9yIGdvb2QuIEFsbCBodXJ0bGluZyB0b3dhcmQgZXZlbnRzIG5vbmUgb2YgdGhlbSBjYW4gdW5kby4gRW5nYWdpbmcsIHByb3B1bHNpdmUsIGFuZCB3aXRoIGEgZHJhbWF0aWMsIGhlYXJ0LXBvdW5kaW5nIGZpbmFsIGFjdCwgU2VjcmV0cyBvZiBPdXIgSG91c2UgaXMgYSBkYXp6bGluZyBub3ZlbCwgcmljaGx5LWRyYXduLCB0aGF0IHNob3dzIG5vIG1hdHRlciBob3cgaGFyZCBvdXRzaWRlIGZvcmNlcyBtYXkgc2hha2UgeW91LCB0aGUgYm9uZHMgb2YgZmFtaWx5IGFyZSBzdHJvbmdlciB0aGFuIHRoZSBoYXJzaGVzdCB3aW5kcy4iLAogICAgICAgICJpbmR1c3RyeUlkZW50aWZpZXJzIjogWwogICAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJJU0JOXzEzIiwKICAgICAgICAgICAgImlkZW50aWZpZXIiOiAiOTc4MTI1MDI0MTYxMCIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogIklTQk5fMTAiLAogICAgICAgICAgICAiaWRlbnRpZmllciI6ICIxMjUwMjQxNjE4IgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInJlYWRpbmdNb2RlcyI6IHsKICAgICAgICAgICJ0ZXh0IjogdHJ1ZSwKICAgICAgICAgICJpbWFnZSI6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICAicGFnZUNvdW50IjogMzIwLAogICAgICAgICJwcmludFR5cGUiOiAiQk9PSyIsCiAgICAgICAgImNhdGVnb3JpZXMiOiBbCiAgICAgICAgICAiRmljdGlvbiIKICAgICAgICBdLAogICAgICAgICJtYXR1cml0eVJhdGluZyI6ICJOT1RfTUFUVVJFIiwKICAgICAgICAiYWxsb3dBbm9uTG9nZ2luZyI6IGZhbHNlLAogICAgICAgICJjb250ZW50VmVyc2lvbiI6ICIxLjEuMS4wLnByZXZpZXcuMiIsCiAgICAgICAgInBhbmVsaXphdGlvblN1bW1hcnkiOiB7CiAgICAgICAgICAiY29udGFpbnNFcHViQnViYmxlcyI6IGZhbHNlLAogICAgICAgICAgImNvbnRhaW5zSW1hZ2VCdWJibGVzIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJpbWFnZUxpbmtzIjogewogICAgICAgICAgInNtYWxsVGh1bWJuYWlsIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2NvbnRlbnQ/aWQ9bFJJcUVBQUFRQkFKJnByaW50c2VjPWZyb250Y292ZXImaW1nPTEmem9vbT01JmVkZ2U9Y3VybCZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgICAidGh1bWJuYWlsIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2NvbnRlbnQ/aWQ9bFJJcUVBQUFRQkFKJnByaW50c2VjPWZyb250Y292ZXImaW1nPTEmem9vbT0xJmVkZ2U9Y3VybCZzb3VyY2U9Z2JzX2FwaSIKICAgICAgICB9LAogICAgICAgICJsYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgInByZXZpZXdMaW5rIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzP2lkPWxSSXFFQUFBUUJBSiZwcmludHNlYz1mcm9udGNvdmVyJmRxPXZlcml0eSZobD0mY2Q9NiZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImluZm9MaW5rIjogImh0dHBzOi8vcGxheS5nb29nbGUuY29tL3N0b3JlL2Jvb2tzL2RldGFpbHM/aWQ9bFJJcUVBQUFRQkFKJnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAiY2Fub25pY2FsVm9sdW1lTGluayI6ICJodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9ib29rcy9kZXRhaWxzP2lkPWxSSXFFQUFBUUJBSiIKICAgICAgfSwKICAgICAgInNhbGVJbmZvIjogewogICAgICAgICJjb3VudHJ5IjogIlVTIiwKICAgICAgICAic2FsZWFiaWxpdHkiOiAiRk9SX1NBTEUiLAogICAgICAgICJpc0Vib29rIjogdHJ1ZSwKICAgICAgICAibGlzdFByaWNlIjogewogICAgICAgICAgImFtb3VudCI6IDguOTksCiAgICAgICAgICAiY3VycmVuY3lDb2RlIjogIlVTRCIKICAgICAgICB9LAogICAgICAgICJyZXRhaWxQcmljZSI6IHsKICAgICAgICAgICJhbW91bnQiOiA4Ljk5LAogICAgICAgICAgImN1cnJlbmN5Q29kZSI6ICJVU0QiCiAgICAgICAgfSwKICAgICAgICAiYnV5TGluayI6ICJodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9ib29rcy9kZXRhaWxzP2lkPWxSSXFFQUFBUUJBSiZyZGlkPWJvb2stbFJJcUVBQUFRQkFKJnJkb3Q9MSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgIm9mZmVycyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImZpbnNreU9mZmVyVHlwZSI6IDEsCiAgICAgICAgICAgICJsaXN0UHJpY2UiOiB7CiAgICAgICAgICAgICAgImFtb3VudEluTWljcm9zIjogODk5MDAwMCwKICAgICAgICAgICAgICAiY3VycmVuY3lDb2RlIjogIlVTRCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInJldGFpbFByaWNlIjogewogICAgICAgICAgICAgICJhbW91bnRJbk1pY3JvcyI6IDg5OTAwMDAsCiAgICAgICAgICAgICAgImN1cnJlbmN5Q29kZSI6ICJVU0QiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJnaWZ0YWJsZSI6IHRydWUKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJhY2Nlc3NJbmZvIjogewogICAgICAgICJjb3VudHJ5IjogIlVTIiwKICAgICAgICAidmlld2FiaWxpdHkiOiAiUEFSVElBTCIsCiAgICAgICAgImVtYmVkZGFibGUiOiB0cnVlLAogICAgICAgICJwdWJsaWNEb21haW4iOiBmYWxzZSwKICAgICAgICAidGV4dFRvU3BlZWNoUGVybWlzc2lvbiI6ICJBTExPV0VEIiwKICAgICAgICAiZXB1YiI6IHsKICAgICAgICAgICJpc0F2YWlsYWJsZSI6IHRydWUsCiAgICAgICAgICAiYWNzVG9rZW5MaW5rIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2Rvd25sb2FkL1NlY3JldHNfb2ZfT3VyX0hvdXNlLXNhbXBsZS1lcHViLmFjc20/aWQ9bFJJcUVBQUFRQkFKJmZvcm1hdD1lcHViJm91dHB1dD1hY3M0X2Z1bGZpbGxtZW50X3Rva2VuJmRsX3R5cGU9c2FtcGxlJnNvdXJjZT1nYnNfYXBpIgogICAgICAgIH0sCiAgICAgICAgInBkZiI6IHsKICAgICAgICAgICJpc0F2YWlsYWJsZSI6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICAid2ViUmVhZGVyTGluayI6ICJodHRwOi8vcGxheS5nb29nbGUuY29tL2Jvb2tzL3JlYWRlcj9pZD1sUklxRUFBQVFCQUomaGw9JnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAiYWNjZXNzVmlld1N0YXR1cyI6ICJTQU1QTEUiLAogICAgICAgICJxdW90ZVNoYXJpbmdBbGxvd2VkIjogZmFsc2UKICAgICAgfSwKICAgICAgInNlYXJjaEluZm8iOiB7CiAgICAgICAgInRleHRTbmlwcGV0IjogIkEgdGhyaWxsaW5nIGRvbWVzdGljIGRyYW1hIHNldCBhZ2FpbnN0IHRoZSBwb3dlciBvZiB0aGUgd2lsZGVybmVzcywgUmVhIEZyZXkmIzM5O3MgU2VjcmV0cyBvZiBPdXIgSG91c2UgaXMgYSBkZWVwbHktZmVsdCBub3ZlbCBvZiBsb25nLWhlbGQgc2VjcmV0cyBhbmQgdGhlIHN0cmVuZ3RoIG9mIGZhbWlseS4iCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogImJvb2tzI3ZvbHVtZSIsCiAgICAgICJpZCI6ICJ5cGVwQ2dBQVFCQUoiLAogICAgICAiZXRhZyI6ICJTUjlrS0Q4dDZQayIsCiAgICAgICJzZWxmTGluayI6ICJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9ib29rcy92MS92b2x1bWVzL3lwZXBDZ0FBUUJBSiIsCiAgICAgICJ2b2x1bWVJbmZvIjogewogICAgICAgICJ0aXRsZSI6ICJUaGUgTGFzdCBBZHZlbnR1cmUgb2YgQ29uc3RhbmNlIFZlcml0eSIsCiAgICAgICAgImF1dGhvcnMiOiBbCiAgICAgICAgICAiQS4gTGVlIE1hcnRpbmV6IgogICAgICAgIF0sCiAgICAgICAgInB1Ymxpc2hlciI6ICJTaW1vbiBhbmQgU2NodXN0ZXIiLAogICAgICAgICJwdWJsaXNoZWREYXRlIjogIjIwMTYtMDctMDUiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJDb25zdGFuY2UgVmVyaXR5IGhhcyBiZWVuIHNhdmluZyB0aGUgd29ybGQgc2luY2Ugc2hlIHdhcyBzZXZlbiwgYW5kIHNoZeKAmXMgc2ljayBvZiBpdC4gU2hlIHNldHMgb2ZmIG9uIG9uZSBsYXN0IGFkdmVudHVyZSB0byByZXNldCBoZXIgZGVzdGlueSBhbmQgYmVjb21lIHRoZSBvbmUgdGhpbmcgc2hl4oCZcyBuZXZlciBiZWVuOiBvcmRpbmFyeS4gRXZlciBzaW5jZSBzaGUgd2FzIGdyYW50ZWQgYSB3aXNoIGF0IGJpcnRoIGJ5IGhlciBmYWlyeSBnb2Rtb3RoZXIsIENvbnN0YW5jZSBWZXJpdHkgaGFzIGJlY29tZSB0aGUgd29ybGTigJlzIGdyZWF0IGFkdmVudHVyZXIuIFNoZSBpcyBhIG1hc3RlciBvZiBtYXJ0aWFsIGFydHMsIGEga2VlbiBkZXRlY3RpdmUsIGFuZCBwb3NzZXNzZXMgYSBjb2xsZWN0aW9uIG9mIHN0cmFuZ2UgYXJ0aWZhY3RzLiBDb25zdGFuY2UgaGFzIHNwZW50IHRoZSBwYXN0IHR3ZW50eS1laWdodCB5ZWFycyBzYXZpbmcgdGhlIHdvcmxkLCBhbmQgc2hl4oCZcyB0aXJlZCBvZiBpdC4gQWxsIHNoZSB3YW50cyBpcyB0byB3b3JrIGluIGFuIG9mZmljZSBhbmQgZGF0ZSBhIG5pY2UsIG5vcm1hbCBndXkuIEFuZCBzaGXigJlzIGZpZ3VyZWQgYSB3YXkgb3V0LiBUaGUgb25seSBwcm9ibGVtIGlzIHRoYXQgc2F2aW5nIHRoZSB3b3JsZCBpcyBDb25zdGFuY2XigJlzIGRlc3RpbnkuIFNoZeKAmXMgZ3JlYXQgYXQgaXQsIGFuZCB0aGVyZSBhcmUgZm9yY2VzIGF0IHdvcmsgdG8gbWFrZSBzdXJlIHNoZSBzdGF5cyBpbiB0aGUgam9iLiBUaGVuIGFnYWluLCBpdOKAmXMgYWxzbyBoZXIgZGVzdGlueSB0byBoYXZlIGEgZ2xvcmlvdXMgZGVhdGguIiwKICAgICAgICAiaW5kdXN0cnlJZGVudGlmaWVycyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAiSVNCTl8xMyIsCiAgICAgICAgICAgICJpZGVudGlmaWVyIjogIjk3ODE0ODE0NDM1MzEiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJJU0JOXzEwIiwKICAgICAgICAgICAgImlkZW50aWZpZXIiOiAiMTQ4MTQ0MzUzNCIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJyZWFkaW5nTW9kZXMiOiB7CiAgICAgICAgICAidGV4dCI6IHRydWUsCiAgICAgICAgICAiaW1hZ2UiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgInBhZ2VDb3VudCI6IDM4NCwKICAgICAgICAicHJpbnRUeXBlIjogIkJPT0siLAogICAgICAgICJjYXRlZ29yaWVzIjogWwogICAgICAgICAgIkZpY3Rpb24iCiAgICAgICAgXSwKICAgICAgICAibWF0dXJpdHlSYXRpbmciOiAiTk9UX01BVFVSRSIsCiAgICAgICAgImFsbG93QW5vbkxvZ2dpbmciOiB0cnVlLAogICAgICAgICJjb250ZW50VmVyc2lvbiI6ICIxLjcuNy4wLnByZXZpZXcuMiIsCiAgICAgICAgInBhbmVsaXphdGlvblN1bW1hcnkiOiB7CiAgICAgICAgICAiY29udGFpbnNFcHViQnViYmxlcyI6IGZhbHNlLAogICAgICAgICAgImNvbnRhaW5zSW1hZ2VCdWJibGVzIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJpbWFnZUxpbmtzIjogewogICAgICAgICAgInNtYWxsVGh1bWJuYWlsIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2NvbnRlbnQ/aWQ9eXBlcENnQUFRQkFKJnByaW50c2VjPWZyb250Y292ZXImaW1nPTEmem9vbT01JmVkZ2U9Y3VybCZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgICAidGh1bWJuYWlsIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2NvbnRlbnQ/aWQ9eXBlcENnQUFRQkFKJnByaW50c2VjPWZyb250Y292ZXImaW1nPTEmem9vbT0xJmVkZ2U9Y3VybCZzb3VyY2U9Z2JzX2FwaSIKICAgICAgICB9LAogICAgICAgICJsYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgInByZXZpZXdMaW5rIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzP2lkPXlwZXBDZ0FBUUJBSiZwcmludHNlYz1mcm9udGNvdmVyJmRxPXZlcml0eSZobD0mY2Q9NyZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImluZm9MaW5rIjogImh0dHBzOi8vcGxheS5nb29nbGUuY29tL3N0b3JlL2Jvb2tzL2RldGFpbHM/aWQ9eXBlcENnQUFRQkFKJnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAiY2Fub25pY2FsVm9sdW1lTGluayI6ICJodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9ib29rcy9kZXRhaWxzP2lkPXlwZXBDZ0FBUUJBSiIKICAgICAgfSwKICAgICAgInNhbGVJbmZvIjogewogICAgICAgICJjb3VudHJ5IjogIlVTIiwKICAgICAgICAic2FsZWFiaWxpdHkiOiAiRk9SX1NBTEUiLAogICAgICAgICJpc0Vib29rIjogdHJ1ZSwKICAgICAgICAibGlzdFByaWNlIjogewogICAgICAgICAgImFtb3VudCI6IDcuOTksCiAgICAgICAgICAiY3VycmVuY3lDb2RlIjogIlVTRCIKICAgICAgICB9LAogICAgICAgICJyZXRhaWxQcmljZSI6IHsKICAgICAgICAgICJhbW91bnQiOiA3Ljk5LAogICAgICAgICAgImN1cnJlbmN5Q29kZSI6ICJVU0QiCiAgICAgICAgfSwKICAgICAgICAiYnV5TGluayI6ICJodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9ib29rcy9kZXRhaWxzP2lkPXlwZXBDZ0FBUUJBSiZyZGlkPWJvb2steXBlcENnQUFRQkFKJnJkb3Q9MSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgIm9mZmVycyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImZpbnNreU9mZmVyVHlwZSI6IDEsCiAgICAgICAgICAgICJsaXN0UHJpY2UiOiB7CiAgICAgICAgICAgICAgImFtb3VudEluTWljcm9zIjogNzk5MDAwMCwKICAgICAgICAgICAgICAiY3VycmVuY3lDb2RlIjogIlVTRCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInJldGFpbFByaWNlIjogewogICAgICAgICAgICAgICJhbW91bnRJbk1pY3JvcyI6IDc5OTAwMDAsCiAgICAgICAgICAgICAgImN1cnJlbmN5Q29kZSI6ICJVU0QiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJnaWZ0YWJsZSI6IHRydWUKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJhY2Nlc3NJbmZvIjogewogICAgICAgICJjb3VudHJ5IjogIlVTIiwKICAgICAgICAidmlld2FiaWxpdHkiOiAiUEFSVElBTCIsCiAgICAgICAgImVtYmVkZGFibGUiOiB0cnVlLAogICAgICAgICJwdWJsaWNEb21haW4iOiBmYWxzZSwKICAgICAgICAidGV4dFRvU3BlZWNoUGVybWlzc2lvbiI6ICJBTExPV0VEX0ZPUl9BQ0NFU1NJQklMSVRZIiwKICAgICAgICAiZXB1YiI6IHsKICAgICAgICAgICJpc0F2YWlsYWJsZSI6IHRydWUKICAgICAgICB9LAogICAgICAgICJwZGYiOiB7CiAgICAgICAgICAiaXNBdmFpbGFibGUiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgIndlYlJlYWRlckxpbmsiOiAiaHR0cDovL3BsYXkuZ29vZ2xlLmNvbS9ib29rcy9yZWFkZXI/aWQ9eXBlcENnQUFRQkFKJmhsPSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImFjY2Vzc1ZpZXdTdGF0dXMiOiAiU0FNUExFIiwKICAgICAgICAicXVvdGVTaGFyaW5nQWxsb3dlZCI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJzZWFyY2hJbmZvIjogewogICAgICAgICJ0ZXh0U25pcHBldCI6ICJDb25zdGFuY2UgVmVyaXR5IGhhcyBiZWVuIHNhdmluZyB0aGUgd29ybGQgc2luY2Ugc2hlIHdhcyBzZXZlbiwgYW5kIHNoZeKAmXMgc2ljayBvZiBpdC4iCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogImJvb2tzI3ZvbHVtZSIsCiAgICAgICJpZCI6ICJidDk2emdFQUNBQUoiLAogICAgICAiZXRhZyI6ICJONzh5cnV3T21rMCIsCiAgICAgICJzZWxmTGluayI6ICJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9ib29rcy92MS92b2x1bWVzL2J0OTZ6Z0VBQ0FBSiIsCiAgICAgICJ2b2x1bWVJbmZvIjogewogICAgICAgICJ0aXRsZSI6ICJUaGUgVmVyaXR5IiwKICAgICAgICAic3VidGl0bGUiOiAiUGFydCBUd28iLAogICAgICAgICJhdXRob3JzIjogWwogICAgICAgICAgIk0uIEouIExhd3JpZSIKICAgICAgICBdLAogICAgICAgICJwdWJsaXNoZXIiOiAiSW5kZXBlbmRlbnRseSBQdWJsaXNoZWQiLAogICAgICAgICJwdWJsaXNoZWREYXRlIjogIjIwMjAtMDMtMjMiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGVyZSdzIG5vIHBsYWNlIGxpa2UgaG9tZS4uLlNjYXJsZXR0IGFuZCBoZXIgQ2FuYXJpZXMgYXJlIGJhY2sgYmVoaW5kIHRoZSB3YWxsLCBidXQgdGhlaXIgd2VsY29tZSBob21lIHdhcyBmYXIgZnJvbSB3YXJtLlRoZXkgaGF2ZSByZXR1cm5lZCB3aXRoIGEgbWlzc2lvbi4gT25lIHRoYXQgTm9haCBhbmQgVGhlIFZlcml0eSB3aWxsIGRvIGFueXRoaW5nIHRvIHN0b3AuU2VjcmV0cyB3aWxsIGJlIHVuY292ZXJlZC5IZWFydHMgd2lsbCBicm9rZW4uQW5kIGxpdmVzIHdpbGwgYmUgbG9zdC5CdXQgd2hlbiBkaWQgYmVpbmcgZGVhZCBldmVyIHN0b3AgYW55b25lPyIsCiAgICAgICAgImluZHVzdHJ5SWRlbnRpZmllcnMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogIklTQk5fMTMiLAogICAgICAgICAgICAiaWRlbnRpZmllciI6ICI5Nzk4NjI5NjQ2ODYwIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInJlYWRpbmdNb2RlcyI6IHsKICAgICAgICAgICJ0ZXh0IjogZmFsc2UsCiAgICAgICAgICAiaW1hZ2UiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgInBhZ2VDb3VudCI6IDAsCiAgICAgICAgInByaW50VHlwZSI6ICJCT09LIiwKICAgICAgICAibWF0dXJpdHlSYXRpbmciOiAiTk9UX01BVFVSRSIsCiAgICAgICAgImFsbG93QW5vbkxvZ2dpbmciOiBmYWxzZSwKICAgICAgICAiY29udGVudFZlcnNpb24iOiAicHJldmlldy0xLjAuMCIsCiAgICAgICAgInBhbmVsaXphdGlvblN1bW1hcnkiOiB7CiAgICAgICAgICAiY29udGFpbnNFcHViQnViYmxlcyI6IGZhbHNlLAogICAgICAgICAgImNvbnRhaW5zSW1hZ2VCdWJibGVzIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJpbWFnZUxpbmtzIjogewogICAgICAgICAgInNtYWxsVGh1bWJuYWlsIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2NvbnRlbnQ/aWQ9YnQ5NnpnRUFDQUFKJnByaW50c2VjPWZyb250Y292ZXImaW1nPTEmem9vbT01JnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAgICJ0aHVtYm5haWwiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvY29udGVudD9pZD1idDk2emdFQUNBQUomcHJpbnRzZWM9ZnJvbnRjb3ZlciZpbWc9MSZ6b29tPTEmc291cmNlPWdic19hcGkiCiAgICAgICAgfSwKICAgICAgICAibGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICJwcmV2aWV3TGluayI6ICJodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcz9pZD1idDk2emdFQUNBQUomZHE9dmVyaXR5JmhsPSZjZD04JnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAiaW5mb0xpbmsiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3M/aWQ9YnQ5NnpnRUFDQUFKJmRxPXZlcml0eSZobD0mc291cmNlPWdic19hcGkiLAogICAgICAgICJjYW5vbmljYWxWb2x1bWVMaW5rIjogImh0dHBzOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcy9hYm91dC9UaGVfVmVyaXR5Lmh0bWw/aGw9JmlkPWJ0OTZ6Z0VBQ0FBSiIKICAgICAgfSwKICAgICAgInNhbGVJbmZvIjogewogICAgICAgICJjb3VudHJ5IjogIlVTIiwKICAgICAgICAic2FsZWFiaWxpdHkiOiAiTk9UX0ZPUl9TQUxFIiwKICAgICAgICAiaXNFYm9vayI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJhY2Nlc3NJbmZvIjogewogICAgICAgICJjb3VudHJ5IjogIlVTIiwKICAgICAgICAidmlld2FiaWxpdHkiOiAiTk9fUEFHRVMiLAogICAgICAgICJlbWJlZGRhYmxlIjogZmFsc2UsCiAgICAgICAgInB1YmxpY0RvbWFpbiI6IGZhbHNlLAogICAgICAgICJ0ZXh0VG9TcGVlY2hQZXJtaXNzaW9uIjogIkFMTE9XRUQiLAogICAgICAgICJlcHViIjogewogICAgICAgICAgImlzQXZhaWxhYmxlIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJwZGYiOiB7CiAgICAgICAgICAiaXNBdmFpbGFibGUiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgIndlYlJlYWRlckxpbmsiOiAiaHR0cDovL3BsYXkuZ29vZ2xlLmNvbS9ib29rcy9yZWFkZXI/aWQ9YnQ5NnpnRUFDQUFKJmhsPSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImFjY2Vzc1ZpZXdTdGF0dXMiOiAiTk9ORSIsCiAgICAgICAgInF1b3RlU2hhcmluZ0FsbG93ZWQiOiBmYWxzZQogICAgICB9LAogICAgICAic2VhcmNoSW5mbyI6IHsKICAgICAgICAidGV4dFNuaXBwZXQiOiAiT25lIHRoYXQgTm9haCBhbmQgVGhlIFZlcml0eSB3aWxsIGRvIGFueXRoaW5nIHRvIHN0b3AuU2VjcmV0cyB3aWxsIGJlIHVuY292ZXJlZC5IZWFydHMgd2lsbCBicm9rZW4uQW5kIGxpdmVzIHdpbGwgYmUgbG9zdC5CdXQgd2hlbiBkaWQgYmVpbmcgZGVhZCBldmVyIHN0b3AgYW55b25lPyIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAiYm9va3Mjdm9sdW1lIiwKICAgICAgImlkIjogImtxWnF6Z0VBQ0FBSiIsCiAgICAgICJldGFnIjogIk9XMWxFT2VNYmQ4IiwKICAgICAgInNlbGZMaW5rIjogImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2Jvb2tzL3YxL3ZvbHVtZXMva3FacXpnRUFDQUFKIiwKICAgICAgInZvbHVtZUluZm8iOiB7CiAgICAgICAgInRpdGxlIjogIlZlcml0eSIsCiAgICAgICAgImF1dGhvcnMiOiBbCiAgICAgICAgICAiQ3ludGhpYSBMZWUiCiAgICAgICAgXSwKICAgICAgICAicHVibGlzaGVyIjogIkluZGVwZW5kZW50bHkgUHVibGlzaGVkIiwKICAgICAgICAicHVibGlzaGVkRGF0ZSI6ICIyMDIxLTA0LTI3IiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiQ2FtaSBNYXJ0aW4gaXMgb2ZmZXJlZCBhIGRyZWFtIGpvYiBhcyBhIG5hbm55IHRvIHlvdW5nIFF1ZW50aW4gQmxhbmNoZXR0ZS4gSGVyIGVtcGxveWVyIG93bnMgYW4gaW5mYW1vdXMgcGxhbnRhdGlvbiBob21lIGNhbGxlZCBWZXJpdHkuIFZlcml0eSBpcyBmYW1vdXMgZm9yIHRoZSBjcnVlbHRpZXMgb2YgaXRzIGFudGViZWxsdW0gcGFzdCBhbmQsIHNvbWUgc2F5LCBmb3IgdGhlIHN0cmFuZ2VuZXNzIG9mIGl0cyBjdXJyZW50IGluaGFiaXRhbnRzLCBiZSB0aGV5IGFsaXZlIG9yIGRlYWQuIFRoZSBvbGQgYW50ZWJlbGx1bSBob21lIGlzIGZ1bGwgb2Ygc2VjcmV0cywgc29tZSBvZiB0aGVtIGRlYWRseS4gU3RpbGwgdGhlcmUgaXMgdGhlIHByb21pc2Ugb2YgbG92ZSBhdCBWZXJpdHksIGxvdmUgZm9yIGhlciBwdXBpbCBhbmQgYSBwb3dlcmZ1bCBhdHRyYWN0aW9uIHRvIENocmlzdG9waGVyIEJsYW5jaGV0dGUsIGEgZnJpZW5kIG9mIHRoZSBmYW1pbHksIHdobyBoYXMgc2VjcmV0cyBvZiBoaXMgb3duLiBDYW1pIGJlZ2lucyB0byBzdXNwZWN0IHRoYXQgc29tZW9uZSBvciBzb21ldGhpbmcgaW4gdGhlIGhvdXNlIHdhbnRzIHNvbWV0aGluZyBmcm9tIGhlciwgc29tZXRoaW5nIHNoZSdzIG5vdCBwcmVwYXJlZCB0byBnaXZlLiIsCiAgICAgICAgImluZHVzdHJ5SWRlbnRpZmllcnMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogIklTQk5fMTMiLAogICAgICAgICAgICAiaWRlbnRpZmllciI6ICI5Nzk4NzQ1MzkxODA0IgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInJlYWRpbmdNb2RlcyI6IHsKICAgICAgICAgICJ0ZXh0IjogZmFsc2UsCiAgICAgICAgICAiaW1hZ2UiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgInBhZ2VDb3VudCI6IDMxMiwKICAgICAgICAicHJpbnRUeXBlIjogIkJPT0siLAogICAgICAgICJtYXR1cml0eVJhdGluZyI6ICJOT1RfTUFUVVJFIiwKICAgICAgICAiYWxsb3dBbm9uTG9nZ2luZyI6IGZhbHNlLAogICAgICAgICJjb250ZW50VmVyc2lvbiI6ICJwcmV2aWV3LTEuMC4wIiwKICAgICAgICAicGFuZWxpemF0aW9uU3VtbWFyeSI6IHsKICAgICAgICAgICJjb250YWluc0VwdWJCdWJibGVzIjogZmFsc2UsCiAgICAgICAgICAiY29udGFpbnNJbWFnZUJ1YmJsZXMiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgImltYWdlTGlua3MiOiB7CiAgICAgICAgICAic21hbGxUaHVtYm5haWwiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvY29udGVudD9pZD1rcVpxemdFQUNBQUomcHJpbnRzZWM9ZnJvbnRjb3ZlciZpbWc9MSZ6b29tPTUmc291cmNlPWdic19hcGkiLAogICAgICAgICAgInRodW1ibmFpbCI6ICJodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcy9jb250ZW50P2lkPWtxWnF6Z0VBQ0FBSiZwcmludHNlYz1mcm9udGNvdmVyJmltZz0xJnpvb209MSZzb3VyY2U9Z2JzX2FwaSIKICAgICAgICB9LAogICAgICAgICJsYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgInByZXZpZXdMaW5rIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzP2lkPWtxWnF6Z0VBQ0FBSiZkcT12ZXJpdHkmaGw9JmNkPTkmc291cmNlPWdic19hcGkiLAogICAgICAgICJpbmZvTGluayI6ICJodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcz9pZD1rcVpxemdFQUNBQUomZHE9dmVyaXR5JmhsPSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImNhbm9uaWNhbFZvbHVtZUxpbmsiOiAiaHR0cHM6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2Fib3V0L1Zlcml0eS5odG1sP2hsPSZpZD1rcVpxemdFQUNBQUoiCiAgICAgIH0sCiAgICAgICJzYWxlSW5mbyI6IHsKICAgICAgICAiY291bnRyeSI6ICJVUyIsCiAgICAgICAgInNhbGVhYmlsaXR5IjogIk5PVF9GT1JfU0FMRSIsCiAgICAgICAgImlzRWJvb2siOiBmYWxzZQogICAgICB9LAogICAgICAiYWNjZXNzSW5mbyI6IHsKICAgICAgICAiY291bnRyeSI6ICJVUyIsCiAgICAgICAgInZpZXdhYmlsaXR5IjogIk5PX1BBR0VTIiwKICAgICAgICAiZW1iZWRkYWJsZSI6IGZhbHNlLAogICAgICAgICJwdWJsaWNEb21haW4iOiBmYWxzZSwKICAgICAgICAidGV4dFRvU3BlZWNoUGVybWlzc2lvbiI6ICJBTExPV0VEIiwKICAgICAgICAiZXB1YiI6IHsKICAgICAgICAgICJpc0F2YWlsYWJsZSI6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICAicGRmIjogewogICAgICAgICAgImlzQXZhaWxhYmxlIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJ3ZWJSZWFkZXJMaW5rIjogImh0dHA6Ly9wbGF5Lmdvb2dsZS5jb20vYm9va3MvcmVhZGVyP2lkPWtxWnF6Z0VBQ0FBSiZobD0mc291cmNlPWdic19hcGkiLAogICAgICAgICJhY2Nlc3NWaWV3U3RhdHVzIjogIk5PTkUiLAogICAgICAgICJxdW90ZVNoYXJpbmdBbGxvd2VkIjogZmFsc2UKICAgICAgfSwKICAgICAgInNlYXJjaEluZm8iOiB7CiAgICAgICAgInRleHRTbmlwcGV0IjogIkhlciBlbXBsb3llciBvd25zIGFuIGluZmFtb3VzIHBsYW50YXRpb24gaG9tZSBjYWxsZWQgVmVyaXR5LiBWZXJpdHkgaXMgZmFtb3VzIGZvciB0aGUgY3J1ZWx0aWVzIG9mIGl0cyBhbnRlYmVsbHVtIHBhc3QgYW5kLCBzb21lIHNheSwgZm9yIHRoZSBzdHJhbmdlbmVzcyBvZiBpdHMgY3VycmVudCBpbmhhYml0YW50cywgYmUgdGhleSBhbGl2ZSBvciBkZWFkLiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAiYm9va3Mjdm9sdW1lIiwKICAgICAgImlkIjogIk95d3U4RF9HbkNVQyIsCiAgICAgICJldGFnIjogIlIzQVQ2YUxuK3lnIiwKICAgICAgInNlbGZMaW5rIjogImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2Jvb2tzL3YxL3ZvbHVtZXMvT3l3dThEX0duQ1VDIiwKICAgICAgInZvbHVtZUluZm8iOiB7CiAgICAgICAgInRpdGxlIjogIkNvZGUgTmFtZSBWZXJpdHkiLAogICAgICAgICJhdXRob3JzIjogWwogICAgICAgICAgIkVsaXphYmV0aCBXZWluIgogICAgICAgIF0sCiAgICAgICAgInB1Ymxpc2hlciI6ICJMaXR0bGUsIEJyb3duIEJvb2tzIGZvciBZb3VuZyBSZWFkZXJzIiwKICAgICAgICAicHVibGlzaGVkRGF0ZSI6ICIyMDIwLTA1LTI2IiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiRG9u4oCZdCBtaXNzIEVsaXphYmV0aCBXZWlu4oCZcyBzdHVubmluZyBuZXcgbm92ZWwsIFN0YXRlbGVzcyBUaGUgYmVsb3ZlZCAjMSBOZXcgWW9yayBUaW1lcyBiZXN0c2VsbGVyLCBhIFwiZmllbmRpc2hseSBwbG90dGVkXCIgKE5ldyBZb3JrIFRpbWVzKSBcImhlYXJ0LWluLXlvdXIgbW91dGggYWR2ZW50dXJlXCIgKFdhc2hpbmd0b24gUG9zdCkgdGhhdCBcIndpbGwgdGFrZSB3aW5nIGFuZCBzb2FyIGludG8geW91ciBoZWFydFwiIChMYXVyaWUgSGFsc2UgQW5kZXJzb24pIE9jdG9iZXIgMTF0aCwgMTk0M+KAlEEgQnJpdGlzaCBzcHkgcGxhbmUgY3Jhc2hlcyBpbiBOYXppLW9jY3VwaWVkIEZyYW5jZS4gSXRzIHBpbG90IGFuZCBwYXNzZW5nZXIgYXJlIGJlc3QgZnJpZW5kcy4gT25lIG9mIHRoZSBnaXJscyBoYXMgYSBjaGFuY2UgYXQgc3Vydml2YWwuIFRoZSBvdGhlciBoYXMgbG9zdCB0aGUgZ2FtZSBiZWZvcmUgaXQncyBiYXJlbHkgYmVndW4uIFdoZW4gXCJWZXJpdHlcIiBpcyBhcnJlc3RlZCBieSB0aGUgR2VzdGFwbywgc2hlJ3Mgc3VyZSBzaGUgZG9lc24ndCBzdGFuZCBhIGNoYW5jZS4gQXMgYSBzZWNyZXQgYWdlbnQgY2FwdHVyZWQgaW4gZW5lbXkgdGVycml0b3J5LCBzaGUncyBsaXZpbmcgYSBzcHkncyB3b3JzdCBuaWdodG1hcmUuIEhlciBOYXppIGludGVycm9nYXRvcnMgZ2l2ZSBoZXIgYSBzaW1wbGUgY2hvaWNlOiByZXZlYWwgaGVyIG1pc3Npb24gb3IgZmFjZSBhIGdyaXNseSBleGVjdXRpb24uIEFzIHNoZSBpbnRyaWNhdGVseSB3ZWF2ZXMgaGVyIGNvbmZlc3Npb24sIFZlcml0eSB1bmNvdmVycyBoZXIgcGFzdCwgaG93IHNoZSBiZWNhbWUgZnJpZW5kcyB3aXRoIHRoZSBwaWxvdCBNYWRkaWUsIGFuZCB3aHkgc2hlIGxlZnQgTWFkZGllIGluIHRoZSB3cmVja2VkIGZ1c2VsYWdlIG9mIHRoZWlyIHBsYW5lLiBPbiBlYWNoIG5ldyBzY3JhcCBvZiBwYXBlciwgVmVyaXR5IGJhdHRsZXMgZm9yIGhlciBsaWZlLCBjb25mcm9udGluZyBoZXIgdmlld3Mgb24gY291cmFnZSwgZmFpbHVyZSBhbmQgaGVyIGRlc3BlcmF0ZSBob3BlIHRvIG1ha2UgaXQgaG9tZS4gQnV0IHdpbGwgdHJhZGluZyBoZXIgc2VjcmV0cyBiZSBlbm91Z2ggdG8gc2F2ZSBoZXIgZnJvbSB0aGUgZW5lbXk/IEEgdW5pdmVyc2FsbHkgYWNjbGFpbWVkIE1pY2hhZWwgTC4gUHJpbnR6IEF3YXJkIEhvbm9yIGJvb2ssIENvZGUgTmFtZSBWZXJpdHkgaXMgYSB2aXNjZXJhbCByZWFkIG9mIGRhbmdlciwgcmVzb2x2ZSwgYW5kIHN1cnZpdmFsIHRoYXQgc2hvd3MganVzdCBob3cgZmFyIHRydWUgZnJpZW5kcyB3aWxsIGdvIHRvIHNhdmUgZWFjaCBvdGhlci4iLAogICAgICAgICJpbmR1c3RyeUlkZW50aWZpZXJzIjogWwogICAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJJU0JOXzEzIiwKICAgICAgICAgICAgImlkZW50aWZpZXIiOiAiOTc4MTQyMzE1MzI1MiIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogIklTQk5fMTAiLAogICAgICAgICAgICAiaWRlbnRpZmllciI6ICIxNDIzMTUzMjUxIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInJlYWRpbmdNb2RlcyI6IHsKICAgICAgICAgICJ0ZXh0IjogdHJ1ZSwKICAgICAgICAgICJpbWFnZSI6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICAicGFnZUNvdW50IjogMzUzLAogICAgICAgICJwcmludFR5cGUiOiAiQk9PSyIsCiAgICAgICAgImNhdGVnb3JpZXMiOiBbCiAgICAgICAgICAiWW91bmcgQWR1bHQgRmljdGlvbiIKICAgICAgICBdLAogICAgICAgICJhdmVyYWdlUmF0aW5nIjogMywKICAgICAgICAicmF0aW5nc0NvdW50IjogMywKICAgICAgICAibWF0dXJpdHlSYXRpbmciOiAiTk9UX01BVFVSRSIsCiAgICAgICAgImFsbG93QW5vbkxvZ2dpbmciOiB0cnVlLAogICAgICAgICJjb250ZW50VmVyc2lvbiI6ICIyLjU1LjQ5LjAucHJldmlldy4yIiwKICAgICAgICAicGFuZWxpemF0aW9uU3VtbWFyeSI6IHsKICAgICAgICAgICJjb250YWluc0VwdWJCdWJibGVzIjogZmFsc2UsCiAgICAgICAgICAiY29udGFpbnNJbWFnZUJ1YmJsZXMiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgImltYWdlTGlua3MiOiB7CiAgICAgICAgICAic21hbGxUaHVtYm5haWwiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvY29udGVudD9pZD1PeXd1OERfR25DVUMmcHJpbnRzZWM9ZnJvbnRjb3ZlciZpbWc9MSZ6b29tPTUmZWRnZT1jdXJsJnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAgICJ0aHVtYm5haWwiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvY29udGVudD9pZD1PeXd1OERfR25DVUMmcHJpbnRzZWM9ZnJvbnRjb3ZlciZpbWc9MSZ6b29tPTEmZWRnZT1jdXJsJnNvdXJjZT1nYnNfYXBpIgogICAgICAgIH0sCiAgICAgICAgImxhbmd1YWdlIjogImVuIiwKICAgICAgICAicHJldmlld0xpbmsiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3M/aWQ9T3l3dThEX0duQ1VDJnByaW50c2VjPWZyb250Y292ZXImZHE9dmVyaXR5JmhsPSZjZD0xMCZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgImluZm9MaW5rIjogImh0dHBzOi8vcGxheS5nb29nbGUuY29tL3N0b3JlL2Jvb2tzL2RldGFpbHM/aWQ9T3l3dThEX0duQ1VDJnNvdXJjZT1nYnNfYXBpIiwKICAgICAgICAiY2Fub25pY2FsVm9sdW1lTGluayI6ICJodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9ib29rcy9kZXRhaWxzP2lkPU95d3U4RF9HbkNVQyIKICAgICAgfSwKICAgICAgInNhbGVJbmZvIjogewogICAgICAgICJjb3VudHJ5IjogIlVTIiwKICAgICAgICAic2FsZWFiaWxpdHkiOiAiRk9SX1NBTEUiLAogICAgICAgICJpc0Vib29rIjogdHJ1ZSwKICAgICAgICAibGlzdFByaWNlIjogewogICAgICAgICAgImFtb3VudCI6IDkuOTksCiAgICAgICAgICAiY3VycmVuY3lDb2RlIjogIlVTRCIKICAgICAgICB9LAogICAgICAgICJyZXRhaWxQcmljZSI6IHsKICAgICAgICAgICJhbW91bnQiOiA5Ljk5LAogICAgICAgICAgImN1cnJlbmN5Q29kZSI6ICJVU0QiCiAgICAgICAgfSwKICAgICAgICAiYnV5TGluayI6ICJodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9ib29rcy9kZXRhaWxzP2lkPU95d3U4RF9HbkNVQyZyZGlkPWJvb2stT3l3dThEX0duQ1VDJnJkb3Q9MSZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICAgIm9mZmVycyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImZpbnNreU9mZmVyVHlwZSI6IDEsCiAgICAgICAgICAgICJsaXN0UHJpY2UiOiB7CiAgICAgICAgICAgICAgImFtb3VudEluTWljcm9zIjogOTk5MDAwMCwKICAgICAgICAgICAgICAiY3VycmVuY3lDb2RlIjogIlVTRCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInJldGFpbFByaWNlIjogewogICAgICAgICAgICAgICJhbW91bnRJbk1pY3JvcyI6IDk5OTAwMDAsCiAgICAgICAgICAgICAgImN1cnJlbmN5Q29kZSI6ICJVU0QiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJnaWZ0YWJsZSI6IHRydWUKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJhY2Nlc3NJbmZvIjogewogICAgICAgICJjb3VudHJ5IjogIlVTIiwKICAgICAgICAidmlld2FiaWxpdHkiOiAiUEFSVElBTCIsCiAgICAgICAgImVtYmVkZGFibGUiOiB0cnVlLAogICAgICAgICJwdWJsaWNEb21haW4iOiBmYWxzZSwKICAgICAgICAidGV4dFRvU3BlZWNoUGVybWlzc2lvbiI6ICJBTExPV0VEIiwKICAgICAgICAiZXB1YiI6IHsKICAgICAgICAgICJpc0F2YWlsYWJsZSI6IHRydWUsCiAgICAgICAgICAiYWNzVG9rZW5MaW5rIjogImh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL2Rvd25sb2FkL0NvZGVfTmFtZV9WZXJpdHktc2FtcGxlLWVwdWIuYWNzbT9pZD1PeXd1OERfR25DVUMmZm9ybWF0PWVwdWImb3V0cHV0PWFjczRfZnVsZmlsbG1lbnRfdG9rZW4mZGxfdHlwZT1zYW1wbGUmc291cmNlPWdic19hcGkiCiAgICAgICAgfSwKICAgICAgICAicGRmIjogewogICAgICAgICAgImlzQXZhaWxhYmxlIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJ3ZWJSZWFkZXJMaW5rIjogImh0dHA6Ly9wbGF5Lmdvb2dsZS5jb20vYm9va3MvcmVhZGVyP2lkPU95d3U4RF9HbkNVQyZobD0mc291cmNlPWdic19hcGkiLAogICAgICAgICJhY2Nlc3NWaWV3U3RhdHVzIjogIlNBTVBMRSIsCiAgICAgICAgInF1b3RlU2hhcmluZ0FsbG93ZWQiOiBmYWxzZQogICAgICB9LAogICAgICAic2VhcmNoSW5mbyI6IHsKICAgICAgICAidGV4dFNuaXBwZXQiOiAiQSB1bml2ZXJzYWxseSBhY2NsYWltZWQgTWljaGFlbCBMLiBQcmludHogQXdhcmQgSG9ub3IgYm9vaywgQ29kZSBOYW1lIFZlcml0eSBpcyBhIHZpc2NlcmFsIHJlYWQgb2YgZGFuZ2VyLCByZXNvbHZlLCBhbmQgc3Vydml2YWwgdGhhdCBzaG93cyBqdXN0IGhvdyBmYXIgdHJ1ZSBmcmllbmRzIHdpbGwgZ28gdG8gc2F2ZSBlYWNoIG90aGVyLiIKICAgICAgfQogICAgfQogIF0KfQo=
  recorded_at: Thu, 25 Jul 2024 17:20:59 GMT
recorded_with: VCR 6.2.0
